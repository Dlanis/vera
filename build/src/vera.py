# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vera
else:
    import _vera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vera.delete_SwigPyIterator

    def value(self):
        return _vera.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vera.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vera.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vera.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vera.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vera.SwigPyIterator_copy(self)

    def next(self):
        return _vera.SwigPyIterator_next(self)

    def __next__(self):
        return _vera.SwigPyIterator___next__(self)

    def previous(self):
        return _vera.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vera.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vera.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vera.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vera.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vera.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vera.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vera.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vera:
_vera.SwigPyIterator_swigregister(SwigPyIterator)

class ivec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.ivec2_x_get, _vera.ivec2_x_set)
    y = property(_vera.ivec2_y_get, _vera.ivec2_y_set)

    def __init__(self, *args):
        _vera.ivec2_swiginit(self, _vera.new_ivec2(*args))

    def __getitem__(self, i):
        return _vera.ivec2___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.ivec2___setitem__(self, i, f)

    def __tostring(self):
        return _vera.ivec2___tostring(self)

    def __add__(self, *args):
        return _vera.ivec2___add__(self, *args)

    def __sub__(self, *args):
        return _vera.ivec2___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.ivec2___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.ivec2___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_ivec2

# Register ivec2 in _vera:
_vera.ivec2_swigregister(ivec2)

class ivec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.ivec3_x_get, _vera.ivec3_x_set)
    y = property(_vera.ivec3_y_get, _vera.ivec3_y_set)
    z = property(_vera.ivec3_z_get, _vera.ivec3_z_set)

    def __init__(self, *args):
        _vera.ivec3_swiginit(self, _vera.new_ivec3(*args))

    def __getitem__(self, i):
        return _vera.ivec3___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.ivec3___setitem__(self, i, f)

    def __tostring(self):
        return _vera.ivec3___tostring(self)

    def __add__(self, *args):
        return _vera.ivec3___add__(self, *args)

    def __sub__(self, *args):
        return _vera.ivec3___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.ivec3___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.ivec3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_ivec3

# Register ivec3 in _vera:
_vera.ivec3_swigregister(ivec3)

class vec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.vec2_x_get, _vera.vec2_x_set)
    y = property(_vera.vec2_y_get, _vera.vec2_y_set)

    def __init__(self, *args):
        _vera.vec2_swiginit(self, _vera.new_vec2(*args))

    def __getitem__(self, i):
        return _vera.vec2___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.vec2___setitem__(self, i, f)

    def __tostring(self):
        return _vera.vec2___tostring(self)

    def __add__(self, *args):
        return _vera.vec2___add__(self, *args)

    def __sub__(self, *args):
        return _vera.vec2___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.vec2___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.vec2___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_vec2

# Register vec2 in _vera:
_vera.vec2_swigregister(vec2)

class vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.vec3_x_get, _vera.vec3_x_set)
    y = property(_vera.vec3_y_get, _vera.vec3_y_set)
    z = property(_vera.vec3_z_get, _vera.vec3_z_set)

    @staticmethod
    def length():
        return _vera.vec3_length()

    def __init__(self, *args):
        _vera.vec3_swiginit(self, _vera.new_vec3(*args))

    def __getitem__(self, i):
        return _vera.vec3___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.vec3___setitem__(self, i, f)

    def __tostring(self):
        return _vera.vec3___tostring(self)

    def __add__(self, *args):
        return _vera.vec3___add__(self, *args)

    def __sub__(self, *args):
        return _vera.vec3___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.vec3___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.vec3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_vec3

# Register vec3 in _vera:
_vera.vec3_swigregister(vec3)

def vec3_length():
    return _vera.vec3_length()

class vec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.vec4_x_get, _vera.vec4_x_set)
    y = property(_vera.vec4_y_get, _vera.vec4_y_set)
    z = property(_vera.vec4_z_get, _vera.vec4_z_set)
    w = property(_vera.vec4_w_get, _vera.vec4_w_set)

    @staticmethod
    def length():
        return _vera.vec4_length()

    def __init__(self, *args):
        _vera.vec4_swiginit(self, _vera.new_vec4(*args))

    def __getitem__(self, i):
        return _vera.vec4___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.vec4___setitem__(self, i, f)

    def __tostring(self):
        return _vera.vec4___tostring(self)

    def __add__(self, *args):
        return _vera.vec4___add__(self, *args)

    def __sub__(self, *args):
        return _vera.vec4___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.vec4___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.vec4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_vec4

# Register vec4 in _vera:
_vera.vec4_swigregister(vec4)

def vec4_length():
    return _vera.vec4_length()

class mat3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def length():
        return _vera.mat3_length()

    def __init__(self, *args):
        _vera.mat3_swiginit(self, _vera.new_mat3(*args))

    def __getitem__(self, i):
        return _vera.mat3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _vera.mat3___setitem__(self, i, v)

    def __tostring(self):
        return _vera.mat3___tostring(self)

    def __add__(self, *args):
        return _vera.mat3___add__(self, *args)

    def __sub__(self, *args):
        return _vera.mat3___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.mat3___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.mat3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_mat3

# Register mat3 in _vera:
_vera.mat3_swigregister(mat3)

def mat3_length():
    return _vera.mat3_length()

class mat4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def length():
        return _vera.mat4_length()

    def __init__(self, *args):
        _vera.mat4_swiginit(self, _vera.new_mat4(*args))

    def __getitem__(self, i):
        return _vera.mat4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _vera.mat4___setitem__(self, i, v)

    def __tostring(self):
        return _vera.mat4___tostring(self)

    def __add__(self, *args):
        return _vera.mat4___add__(self, *args)

    def __sub__(self, *args):
        return _vera.mat4___sub__(self, *args)

    def __mul__(self, *args):
        return _vera.mat4___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.mat4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_mat4

# Register mat4 in _vera:
_vera.mat4_swigregister(mat4)

def mat4_length():
    return _vera.mat4_length()


def sub(*args):
    return _vera.sub(*args)
class quat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_vera.quat_x_get, _vera.quat_x_set)
    y = property(_vera.quat_y_get, _vera.quat_y_set)
    z = property(_vera.quat_z_get, _vera.quat_z_set)
    w = property(_vera.quat_w_get, _vera.quat_w_set)

    @staticmethod
    def length():
        return _vera.quat_length()

    def __init__(self, *args):
        _vera.quat_swiginit(self, _vera.new_quat(*args))

    def __getitem__(self, i):
        return _vera.quat___getitem__(self, i)

    def __setitem__(self, i, f):
        return _vera.quat___setitem__(self, i, f)

    def __tostring(self):
        return _vera.quat___tostring(self)

    def __add__(self, q):
        return _vera.quat___add__(self, q)

    def __mul__(self, *args):
        return _vera.quat___mul__(self, *args)

    def __truediv__(self, *args):
        return _vera.quat___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _vera.delete_quat

# Register quat in _vera:
_vera.quat_swigregister(quat)

def quat_length():
    return _vera.quat_length()


def add(*args):
    return _vera.add(*args)

def mul(*args):
    return _vera.mul(*args)

def div(*args):
    return _vera.div(*args)

def eq(*args):
    return _vera.eq(*args)

def length(q):
    return _vera.length(q)

def normalize(q):
    return _vera.normalize(q)

def dot(x, y):
    return _vera.dot(x, y)

def mix(x, y, a):
    return _vera.mix(x, y, a)

def slerp(x, y, a):
    return _vera.slerp(x, y, a)

def conjugate(q):
    return _vera.conjugate(q)

def inverse(q):
    return _vera.inverse(q)

def eulerAngles(x):
    return _vera.eulerAngles(x)

def roll(x):
    return _vera.roll(x)

def pitch(x):
    return _vera.pitch(x)

def yaw(x):
    return _vera.yaw(x)

def mat3_cast(x):
    return _vera.mat3_cast(x)

def mat4_cast(x):
    return _vera.mat4_cast(x)

def quat_cast(*args):
    return _vera.quat_cast(*args)

def angle(x):
    return _vera.angle(x)

def axis(x):
    return _vera.axis(x)

def angleAxis(angle, axis):
    return _vera.angleAxis(angle, axis)
class Vector4DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.Vector4DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.Vector4DVector___nonzero__(self)

    def __bool__(self):
        return _vera.Vector4DVector___bool__(self)

    def __len__(self):
        return _vera.Vector4DVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.Vector4DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.Vector4DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.Vector4DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.Vector4DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.Vector4DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.Vector4DVector___setitem__(self, *args)

    def pop(self):
        return _vera.Vector4DVector_pop(self)

    def append(self, x):
        return _vera.Vector4DVector_append(self, x)

    def empty(self):
        return _vera.Vector4DVector_empty(self)

    def size(self):
        return _vera.Vector4DVector_size(self)

    def swap(self, v):
        return _vera.Vector4DVector_swap(self, v)

    def begin(self):
        return _vera.Vector4DVector_begin(self)

    def end(self):
        return _vera.Vector4DVector_end(self)

    def rbegin(self):
        return _vera.Vector4DVector_rbegin(self)

    def rend(self):
        return _vera.Vector4DVector_rend(self)

    def clear(self):
        return _vera.Vector4DVector_clear(self)

    def get_allocator(self):
        return _vera.Vector4DVector_get_allocator(self)

    def pop_back(self):
        return _vera.Vector4DVector_pop_back(self)

    def erase(self, *args):
        return _vera.Vector4DVector_erase(self, *args)

    def __init__(self, *args):
        _vera.Vector4DVector_swiginit(self, _vera.new_Vector4DVector(*args))

    def push_back(self, x):
        return _vera.Vector4DVector_push_back(self, x)

    def front(self):
        return _vera.Vector4DVector_front(self)

    def back(self):
        return _vera.Vector4DVector_back(self)

    def assign(self, n, x):
        return _vera.Vector4DVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.Vector4DVector_resize(self, *args)

    def insert(self, *args):
        return _vera.Vector4DVector_insert(self, *args)

    def reserve(self, n):
        return _vera.Vector4DVector_reserve(self, n)

    def capacity(self):
        return _vera.Vector4DVector_capacity(self)
    __swig_destroy__ = _vera.delete_Vector4DVector

# Register Vector4DVector in _vera:
_vera.Vector4DVector_swigregister(Vector4DVector)

class Vector3DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.Vector3DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.Vector3DVector___nonzero__(self)

    def __bool__(self):
        return _vera.Vector3DVector___bool__(self)

    def __len__(self):
        return _vera.Vector3DVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.Vector3DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.Vector3DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.Vector3DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.Vector3DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.Vector3DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.Vector3DVector___setitem__(self, *args)

    def pop(self):
        return _vera.Vector3DVector_pop(self)

    def append(self, x):
        return _vera.Vector3DVector_append(self, x)

    def empty(self):
        return _vera.Vector3DVector_empty(self)

    def size(self):
        return _vera.Vector3DVector_size(self)

    def swap(self, v):
        return _vera.Vector3DVector_swap(self, v)

    def begin(self):
        return _vera.Vector3DVector_begin(self)

    def end(self):
        return _vera.Vector3DVector_end(self)

    def rbegin(self):
        return _vera.Vector3DVector_rbegin(self)

    def rend(self):
        return _vera.Vector3DVector_rend(self)

    def clear(self):
        return _vera.Vector3DVector_clear(self)

    def get_allocator(self):
        return _vera.Vector3DVector_get_allocator(self)

    def pop_back(self):
        return _vera.Vector3DVector_pop_back(self)

    def erase(self, *args):
        return _vera.Vector3DVector_erase(self, *args)

    def __init__(self, *args):
        _vera.Vector3DVector_swiginit(self, _vera.new_Vector3DVector(*args))

    def push_back(self, x):
        return _vera.Vector3DVector_push_back(self, x)

    def front(self):
        return _vera.Vector3DVector_front(self)

    def back(self):
        return _vera.Vector3DVector_back(self)

    def assign(self, n, x):
        return _vera.Vector3DVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.Vector3DVector_resize(self, *args)

    def insert(self, *args):
        return _vera.Vector3DVector_insert(self, *args)

    def reserve(self, n):
        return _vera.Vector3DVector_reserve(self, n)

    def capacity(self):
        return _vera.Vector3DVector_capacity(self)
    __swig_destroy__ = _vera.delete_Vector3DVector

# Register Vector3DVector in _vera:
_vera.Vector3DVector_swigregister(Vector3DVector)

class Vector2DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.Vector2DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.Vector2DVector___nonzero__(self)

    def __bool__(self):
        return _vera.Vector2DVector___bool__(self)

    def __len__(self):
        return _vera.Vector2DVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.Vector2DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.Vector2DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.Vector2DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.Vector2DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.Vector2DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.Vector2DVector___setitem__(self, *args)

    def pop(self):
        return _vera.Vector2DVector_pop(self)

    def append(self, x):
        return _vera.Vector2DVector_append(self, x)

    def empty(self):
        return _vera.Vector2DVector_empty(self)

    def size(self):
        return _vera.Vector2DVector_size(self)

    def swap(self, v):
        return _vera.Vector2DVector_swap(self, v)

    def begin(self):
        return _vera.Vector2DVector_begin(self)

    def end(self):
        return _vera.Vector2DVector_end(self)

    def rbegin(self):
        return _vera.Vector2DVector_rbegin(self)

    def rend(self):
        return _vera.Vector2DVector_rend(self)

    def clear(self):
        return _vera.Vector2DVector_clear(self)

    def get_allocator(self):
        return _vera.Vector2DVector_get_allocator(self)

    def pop_back(self):
        return _vera.Vector2DVector_pop_back(self)

    def erase(self, *args):
        return _vera.Vector2DVector_erase(self, *args)

    def __init__(self, *args):
        _vera.Vector2DVector_swiginit(self, _vera.new_Vector2DVector(*args))

    def push_back(self, x):
        return _vera.Vector2DVector_push_back(self, x)

    def front(self):
        return _vera.Vector2DVector_front(self)

    def back(self):
        return _vera.Vector2DVector_back(self)

    def assign(self, n, x):
        return _vera.Vector2DVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.Vector2DVector_resize(self, *args)

    def insert(self, *args):
        return _vera.Vector2DVector_insert(self, *args)

    def reserve(self, n):
        return _vera.Vector2DVector_reserve(self, n)

    def capacity(self):
        return _vera.Vector2DVector_capacity(self)
    __swig_destroy__ = _vera.delete_Vector2DVector

# Register Vector2DVector in _vera:
_vera.Vector2DVector_swigregister(Vector2DVector)

class FacesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.FacesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.FacesVector___nonzero__(self)

    def __bool__(self):
        return _vera.FacesVector___bool__(self)

    def __len__(self):
        return _vera.FacesVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.FacesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.FacesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.FacesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.FacesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.FacesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.FacesVector___setitem__(self, *args)

    def pop(self):
        return _vera.FacesVector_pop(self)

    def append(self, x):
        return _vera.FacesVector_append(self, x)

    def empty(self):
        return _vera.FacesVector_empty(self)

    def size(self):
        return _vera.FacesVector_size(self)

    def swap(self, v):
        return _vera.FacesVector_swap(self, v)

    def begin(self):
        return _vera.FacesVector_begin(self)

    def end(self):
        return _vera.FacesVector_end(self)

    def rbegin(self):
        return _vera.FacesVector_rbegin(self)

    def rend(self):
        return _vera.FacesVector_rend(self)

    def clear(self):
        return _vera.FacesVector_clear(self)

    def get_allocator(self):
        return _vera.FacesVector_get_allocator(self)

    def pop_back(self):
        return _vera.FacesVector_pop_back(self)

    def erase(self, *args):
        return _vera.FacesVector_erase(self, *args)

    def __init__(self, *args):
        _vera.FacesVector_swiginit(self, _vera.new_FacesVector(*args))

    def push_back(self, x):
        return _vera.FacesVector_push_back(self, x)

    def front(self):
        return _vera.FacesVector_front(self)

    def back(self):
        return _vera.FacesVector_back(self)

    def assign(self, n, x):
        return _vera.FacesVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.FacesVector_resize(self, *args)

    def insert(self, *args):
        return _vera.FacesVector_insert(self, *args)

    def reserve(self, n):
        return _vera.FacesVector_reserve(self, n)

    def capacity(self):
        return _vera.FacesVector_capacity(self)
    __swig_destroy__ = _vera.delete_FacesVector

# Register FacesVector in _vera:
_vera.FacesVector_swigregister(FacesVector)

class TrianglesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.TrianglesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.TrianglesVector___nonzero__(self)

    def __bool__(self):
        return _vera.TrianglesVector___bool__(self)

    def __len__(self):
        return _vera.TrianglesVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.TrianglesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.TrianglesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.TrianglesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.TrianglesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.TrianglesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.TrianglesVector___setitem__(self, *args)

    def pop(self):
        return _vera.TrianglesVector_pop(self)

    def append(self, x):
        return _vera.TrianglesVector_append(self, x)

    def empty(self):
        return _vera.TrianglesVector_empty(self)

    def size(self):
        return _vera.TrianglesVector_size(self)

    def swap(self, v):
        return _vera.TrianglesVector_swap(self, v)

    def begin(self):
        return _vera.TrianglesVector_begin(self)

    def end(self):
        return _vera.TrianglesVector_end(self)

    def rbegin(self):
        return _vera.TrianglesVector_rbegin(self)

    def rend(self):
        return _vera.TrianglesVector_rend(self)

    def clear(self):
        return _vera.TrianglesVector_clear(self)

    def get_allocator(self):
        return _vera.TrianglesVector_get_allocator(self)

    def pop_back(self):
        return _vera.TrianglesVector_pop_back(self)

    def erase(self, *args):
        return _vera.TrianglesVector_erase(self, *args)

    def __init__(self, *args):
        _vera.TrianglesVector_swiginit(self, _vera.new_TrianglesVector(*args))

    def push_back(self, x):
        return _vera.TrianglesVector_push_back(self, x)

    def front(self):
        return _vera.TrianglesVector_front(self)

    def back(self):
        return _vera.TrianglesVector_back(self)

    def assign(self, n, x):
        return _vera.TrianglesVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.TrianglesVector_resize(self, *args)

    def insert(self, *args):
        return _vera.TrianglesVector_insert(self, *args)

    def reserve(self, n):
        return _vera.TrianglesVector_reserve(self, n)

    def capacity(self):
        return _vera.TrianglesVector_capacity(self)
    __swig_destroy__ = _vera.delete_TrianglesVector

# Register TrianglesVector in _vera:
_vera.TrianglesVector_swigregister(TrianglesVector)

class LinesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.LinesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.LinesVector___nonzero__(self)

    def __bool__(self):
        return _vera.LinesVector___bool__(self)

    def __len__(self):
        return _vera.LinesVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.LinesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.LinesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.LinesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.LinesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.LinesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.LinesVector___setitem__(self, *args)

    def pop(self):
        return _vera.LinesVector_pop(self)

    def append(self, x):
        return _vera.LinesVector_append(self, x)

    def empty(self):
        return _vera.LinesVector_empty(self)

    def size(self):
        return _vera.LinesVector_size(self)

    def swap(self, v):
        return _vera.LinesVector_swap(self, v)

    def begin(self):
        return _vera.LinesVector_begin(self)

    def end(self):
        return _vera.LinesVector_end(self)

    def rbegin(self):
        return _vera.LinesVector_rbegin(self)

    def rend(self):
        return _vera.LinesVector_rend(self)

    def clear(self):
        return _vera.LinesVector_clear(self)

    def get_allocator(self):
        return _vera.LinesVector_get_allocator(self)

    def pop_back(self):
        return _vera.LinesVector_pop_back(self)

    def erase(self, *args):
        return _vera.LinesVector_erase(self, *args)

    def __init__(self, *args):
        _vera.LinesVector_swiginit(self, _vera.new_LinesVector(*args))

    def push_back(self, x):
        return _vera.LinesVector_push_back(self, x)

    def front(self):
        return _vera.LinesVector_front(self)

    def back(self):
        return _vera.LinesVector_back(self)

    def assign(self, n, x):
        return _vera.LinesVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.LinesVector_resize(self, *args)

    def insert(self, *args):
        return _vera.LinesVector_insert(self, *args)

    def reserve(self, n):
        return _vera.LinesVector_reserve(self, n)

    def capacity(self):
        return _vera.LinesVector_capacity(self)
    __swig_destroy__ = _vera.delete_LinesVector

# Register LinesVector in _vera:
_vera.LinesVector_swigregister(LinesVector)

class MeshesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.MeshesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.MeshesVector___nonzero__(self)

    def __bool__(self):
        return _vera.MeshesVector___bool__(self)

    def __len__(self):
        return _vera.MeshesVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.MeshesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.MeshesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.MeshesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.MeshesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.MeshesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.MeshesVector___setitem__(self, *args)

    def pop(self):
        return _vera.MeshesVector_pop(self)

    def append(self, x):
        return _vera.MeshesVector_append(self, x)

    def empty(self):
        return _vera.MeshesVector_empty(self)

    def size(self):
        return _vera.MeshesVector_size(self)

    def swap(self, v):
        return _vera.MeshesVector_swap(self, v)

    def begin(self):
        return _vera.MeshesVector_begin(self)

    def end(self):
        return _vera.MeshesVector_end(self)

    def rbegin(self):
        return _vera.MeshesVector_rbegin(self)

    def rend(self):
        return _vera.MeshesVector_rend(self)

    def clear(self):
        return _vera.MeshesVector_clear(self)

    def get_allocator(self):
        return _vera.MeshesVector_get_allocator(self)

    def pop_back(self):
        return _vera.MeshesVector_pop_back(self)

    def erase(self, *args):
        return _vera.MeshesVector_erase(self, *args)

    def __init__(self, *args):
        _vera.MeshesVector_swiginit(self, _vera.new_MeshesVector(*args))

    def push_back(self, x):
        return _vera.MeshesVector_push_back(self, x)

    def front(self):
        return _vera.MeshesVector_front(self)

    def back(self):
        return _vera.MeshesVector_back(self)

    def assign(self, n, x):
        return _vera.MeshesVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.MeshesVector_resize(self, *args)

    def insert(self, *args):
        return _vera.MeshesVector_insert(self, *args)

    def reserve(self, n):
        return _vera.MeshesVector_reserve(self, n)

    def capacity(self):
        return _vera.MeshesVector_capacity(self)
    __swig_destroy__ = _vera.delete_MeshesVector

# Register MeshesVector in _vera:
_vera.MeshesVector_swigregister(MeshesVector)

class ImagesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.ImagesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.ImagesVector___nonzero__(self)

    def __bool__(self):
        return _vera.ImagesVector___bool__(self)

    def __len__(self):
        return _vera.ImagesVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.ImagesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.ImagesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.ImagesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.ImagesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.ImagesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.ImagesVector___setitem__(self, *args)

    def pop(self):
        return _vera.ImagesVector_pop(self)

    def append(self, x):
        return _vera.ImagesVector_append(self, x)

    def empty(self):
        return _vera.ImagesVector_empty(self)

    def size(self):
        return _vera.ImagesVector_size(self)

    def swap(self, v):
        return _vera.ImagesVector_swap(self, v)

    def begin(self):
        return _vera.ImagesVector_begin(self)

    def end(self):
        return _vera.ImagesVector_end(self)

    def rbegin(self):
        return _vera.ImagesVector_rbegin(self)

    def rend(self):
        return _vera.ImagesVector_rend(self)

    def clear(self):
        return _vera.ImagesVector_clear(self)

    def get_allocator(self):
        return _vera.ImagesVector_get_allocator(self)

    def pop_back(self):
        return _vera.ImagesVector_pop_back(self)

    def erase(self, *args):
        return _vera.ImagesVector_erase(self, *args)

    def __init__(self, *args):
        _vera.ImagesVector_swiginit(self, _vera.new_ImagesVector(*args))

    def push_back(self, x):
        return _vera.ImagesVector_push_back(self, x)

    def front(self):
        return _vera.ImagesVector_front(self)

    def back(self):
        return _vera.ImagesVector_back(self)

    def assign(self, n, x):
        return _vera.ImagesVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.ImagesVector_resize(self, *args)

    def insert(self, *args):
        return _vera.ImagesVector_insert(self, *args)

    def reserve(self, n):
        return _vera.ImagesVector_reserve(self, n)

    def capacity(self):
        return _vera.ImagesVector_capacity(self)
    __swig_destroy__ = _vera.delete_ImagesVector

# Register ImagesVector in _vera:
_vera.ImagesVector_swigregister(ImagesVector)

class StringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.StringList___nonzero__(self)

    def __bool__(self):
        return _vera.StringList___bool__(self)

    def __len__(self):
        return _vera.StringList___len__(self)

    def __getslice__(self, i, j):
        return _vera.StringList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.StringList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.StringList___setitem__(self, *args)

    def pop(self):
        return _vera.StringList_pop(self)

    def append(self, x):
        return _vera.StringList_append(self, x)

    def empty(self):
        return _vera.StringList_empty(self)

    def size(self):
        return _vera.StringList_size(self)

    def swap(self, v):
        return _vera.StringList_swap(self, v)

    def begin(self):
        return _vera.StringList_begin(self)

    def end(self):
        return _vera.StringList_end(self)

    def rbegin(self):
        return _vera.StringList_rbegin(self)

    def rend(self):
        return _vera.StringList_rend(self)

    def clear(self):
        return _vera.StringList_clear(self)

    def get_allocator(self):
        return _vera.StringList_get_allocator(self)

    def pop_back(self):
        return _vera.StringList_pop_back(self)

    def erase(self, *args):
        return _vera.StringList_erase(self, *args)

    def __init__(self, *args):
        _vera.StringList_swiginit(self, _vera.new_StringList(*args))

    def push_back(self, x):
        return _vera.StringList_push_back(self, x)

    def front(self):
        return _vera.StringList_front(self)

    def back(self):
        return _vera.StringList_back(self)

    def assign(self, n, x):
        return _vera.StringList_assign(self, n, x)

    def resize(self, *args):
        return _vera.StringList_resize(self, *args)

    def insert(self, *args):
        return _vera.StringList_insert(self, *args)

    def reserve(self, n):
        return _vera.StringList_reserve(self, n)

    def capacity(self):
        return _vera.StringList_capacity(self)
    __swig_destroy__ = _vera.delete_StringList

# Register StringList in _vera:
_vera.StringList_swigregister(StringList)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vera.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vera.FloatVector___nonzero__(self)

    def __bool__(self):
        return _vera.FloatVector___bool__(self)

    def __len__(self):
        return _vera.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _vera.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vera.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vera.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vera.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vera.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vera.FloatVector___setitem__(self, *args)

    def pop(self):
        return _vera.FloatVector_pop(self)

    def append(self, x):
        return _vera.FloatVector_append(self, x)

    def empty(self):
        return _vera.FloatVector_empty(self)

    def size(self):
        return _vera.FloatVector_size(self)

    def swap(self, v):
        return _vera.FloatVector_swap(self, v)

    def begin(self):
        return _vera.FloatVector_begin(self)

    def end(self):
        return _vera.FloatVector_end(self)

    def rbegin(self):
        return _vera.FloatVector_rbegin(self)

    def rend(self):
        return _vera.FloatVector_rend(self)

    def clear(self):
        return _vera.FloatVector_clear(self)

    def get_allocator(self):
        return _vera.FloatVector_get_allocator(self)

    def pop_back(self):
        return _vera.FloatVector_pop_back(self)

    def erase(self, *args):
        return _vera.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _vera.FloatVector_swiginit(self, _vera.new_FloatVector(*args))

    def push_back(self, x):
        return _vera.FloatVector_push_back(self, x)

    def front(self):
        return _vera.FloatVector_front(self)

    def back(self):
        return _vera.FloatVector_back(self)

    def assign(self, n, x):
        return _vera.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _vera.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _vera.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _vera.FloatVector_reserve(self, n)

    def capacity(self):
        return _vera.FloatVector_capacity(self)
    __swig_destroy__ = _vera.delete_FloatVector

# Register FloatVector in _vera:
_vera.FloatVector_swigregister(FloatVector)

EMPTY_NODE = _vera.EMPTY_NODE
MODEL_NODE = _vera.MODEL_NODE
LIGHT_NODE = _vera.LIGHT_NODE
CAMERA_NODE = _vera.CAMERA_NODE
class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Node_swiginit(self, _vera.new_Node())
    __swig_destroy__ = _vera.delete_Node

    def setProperties(self, _other):
        return _vera.Node_setProperties(self, _other)

    def setScale(self, *args):
        return _vera.Node_setScale(self, *args)

    def setPosition(self, *args):
        return _vera.Node_setPosition(self, *args)

    def setOrientation(self, *args):
        return _vera.Node_setOrientation(self, *args)

    def setTransformMatrix(self, *args):
        return _vera.Node_setTransformMatrix(self, *args)

    def getScale(self):
        return _vera.Node_getScale(self)

    def getPosition(self):
        return _vera.Node_getPosition(self)

    def getXAxis(self):
        return _vera.Node_getXAxis(self)

    def getYAxis(self):
        return _vera.Node_getYAxis(self)

    def getZAxis(self):
        return _vera.Node_getZAxis(self)

    def getRightDir(self):
        return _vera.Node_getRightDir(self)

    def getUpDir(self):
        return _vera.Node_getUpDir(self)

    def getForwardDir(self):
        return _vera.Node_getForwardDir(self)

    def getOrientationQuat(self):
        return _vera.Node_getOrientationQuat(self)

    def getOrientationEuler(self):
        return _vera.Node_getOrientationEuler(self)

    def getOrientationMatrix(self):
        return _vera.Node_getOrientationMatrix(self)

    def getPitch(self):
        return _vera.Node_getPitch(self)

    def getHeading(self):
        return _vera.Node_getHeading(self)

    def getRoll(self):
        return _vera.Node_getRoll(self)

    def getTransformMatrix(self):
        return _vera.Node_getTransformMatrix(self)

    def scale(self, *args):
        return _vera.Node_scale(self, *args)

    def translate(self, *args):
        return _vera.Node_translate(self, *args)

    def truck(self, _amount):
        return _vera.Node_truck(self, _amount)

    def boom(self, _amount):
        return _vera.Node_boom(self, _amount)

    def dolly(self, _amount):
        return _vera.Node_dolly(self, _amount)

    def orbit(self, *args):
        return _vera.Node_orbit(self, *args)

    def tilt(self, _degrees):
        return _vera.Node_tilt(self, _degrees)

    def pan(self, _degrees):
        return _vera.Node_pan(self, _degrees)

    def roll(self, _degrees):
        return _vera.Node_roll(self, _degrees)

    def rotate(self, *args):
        return _vera.Node_rotate(self, *args)

    def rotateAround(self, _q, _point):
        return _vera.Node_rotateAround(self, _q, _point)

    def lookAt(self, *args):
        return _vera.Node_lookAt(self, *args)

    def apply(self, *args):
        return _vera.Node_apply(self, *args)

    def reset(self):
        return _vera.Node_reset(self)
    childs = property(_vera.Node_childs_get, _vera.Node_childs_set)
    bChange = property(_vera.Node_bChange_get, _vera.Node_bChange_set)

# Register Node in _vera:
_vera.Node_swigregister(Node)

M_PI = _vera.M_PI
M_2_SQRTPI = _vera.M_2_SQRTPI
PI = _vera.PI
TWO_PI = _vera.TWO_PI
FOUR_PI = _vera.FOUR_PI
HALF_PI = _vera.HALF_PI
QUARTER_PI = _vera.QUARTER_PI
FLT_EPSILON = _vera.FLT_EPSILON

def angleBetween(thetav, phiv, theta, phi):
    return _vera.angleBetween(thetav, phiv, theta, phi)

def saturate(value):
    return _vera.saturate(value)

def clamp(value, min, max):
    return _vera.clamp(value, min, max)

def roundTo(num, factor):
    return _vera.roundTo(num, factor)

def lerp(a, b, f):
    return _vera.lerp(a, b, f)

def inverseMatrix(*args):
    return _vera.inverseMatrix(*args)
LUMINANCE = _vera.LUMINANCE
LUMINANCE_ALPHA = _vera.LUMINANCE_ALPHA
RGB = _vera.RGB
RGB_ALPHA = _vera.RGB_ALPHA

def savePixels(_path, _pixels, _width, _height):
    return _vera.savePixels(_path, _pixels, _width, _height)

def savePixels16(_path, _pixels, _width, _height):
    return _vera.savePixels16(_path, _pixels, _width, _height)

def savePixelsFloat(_path, _pixels, _width, _height):
    return _vera.savePixelsFloat(_path, _pixels, _width, _height)

def loadPixels(*args):
    return _vera.loadPixels(*args)

def loadPixels16(*args):
    return _vera.loadPixels16(*args)

def loadPixelsDepth(_path, _width, _height, _vFlip=True):
    return _vera.loadPixelsDepth(_path, _width, _height, _vFlip)

def loadPixelsBase64(*args):
    return _vera.loadPixelsBase64(*args)

def loadPixelsFloat(_path, _width, _height, _channels, _vFlip=True):
    return _vera.loadPixelsFloat(_path, _width, _height, _channels, _vFlip)

def freePixels(pixels):
    return _vera.freePixels(pixels)

def getLineNumber(_source, _lineNumber):
    return _vera.getLineNumber(_source, _lineNumber)

def toUpper(_string):
    return _vera.toUpper(_string)

def toLower(_string):
    return _vera.toLower(_string)

def toUnderscore(_string):
    return _vera.toUnderscore(_string)

def purifyString(_string):
    return _vera.purifyString(_string)

def haveWildcard(_str):
    return _vera.haveWildcard(_str)

def split(_string, _sep, _tolerate_empty=False):
    return _vera.split(_string, _sep, _tolerate_empty)

def replaceAll(_string, _from, _to):
    return _vera.replaceAll(_string, _from, _to)

def beginsWith(_stringA, _stringB):
    return _vera.beginsWith(_stringA, _stringB)

def isInt(_string):
    return _vera.isInt(_string)

def isDigit(_string):
    return _vera.isDigit(_string)

def isNumber(_string):
    return _vera.isNumber(_string)

def isFloat(_string):
    return _vera.isFloat(_string)

def toBool(_string):
    return _vera.toBool(_string)

def toChar(_string):
    return _vera.toChar(_string)

def toInt(_string):
    return _vera.toInt(_string)

def toFloat(_string):
    return _vera.toFloat(_string)

def toDouble(_string):
    return _vera.toDouble(_string)

def toString(*args):
    return _vera.toString(*args)

def mergeLists(_A, _B):
    return _vera.mergeLists(_A, _B)

def addListElement(_str, _list):
    return _vera.addListElement(_str, _list)

def delListElement(_str, _list):
    return _vera.delListElement(_str, _list)

def getUniformName(_str):
    return _vera.getUniformName(_str)

def sleep_ms(value):
    return _vera.sleep_ms(value)
class Ray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Ray_swiginit(self, _vera.new_Ray(*args))

    def set(self, _org, _dir):
        return _vera.Ray_set(self, _org, _dir)

    def getOrigin(self):
        return _vera.Ray_getOrigin(self)

    def getDirection(self):
        return _vera.Ray_getDirection(self)

    def getInvertDirection(self):
        return _vera.Ray_getInvertDirection(self)

    def getAt(self, _t):
        return _vera.Ray_getAt(self, _t)
    __swig_destroy__ = _vera.delete_Ray

# Register Ray in _vera:
_vera.Ray_swigregister(Ray)

class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Line_swiginit(self, _vera.new_Line(*args))

    def set(self, _p0, _p1):
        return _vera.Line_set(self, _p0, _p1)

    def getMagintude(self):
        return _vera.Line_getMagintude(self)

    def getMagintude2(self):
        return _vera.Line_getMagintude2(self)

    def getCentroid(self):
        return _vera.Line_getCentroid(self)

    def getDireciton(self):
        return _vera.Line_getDireciton(self)

    def getAt(self, _t):
        return _vera.Line_getAt(self, _t)

    def getPoint(self, _index):
        return _vera.Line_getPoint(self, _index)

    def haveColors(self):
        return _vera.Line_haveColors(self)

    def setColor(self, *args):
        return _vera.Line_setColor(self, *args)

    def getColor(self, _index):
        return _vera.Line_getColor(self, _index)

    def getColorAt(self, _t):
        return _vera.Line_getColorAt(self, _t)

    @staticmethod
    def compare(a, b, axis):
        return _vera.Line_compare(a, b, axis)

    @staticmethod
    def compareX(a, b):
        return _vera.Line_compareX(a, b)

    @staticmethod
    def compareY(a, b):
        return _vera.Line_compareY(a, b)

    @staticmethod
    def compareZ(a, b):
        return _vera.Line_compareZ(a, b)
    __swig_destroy__ = _vera.delete_Line

# Register Line in _vera:
_vera.Line_swigregister(Line)

def Line_compare(a, b, axis):
    return _vera.Line_compare(a, b, axis)

def Line_compareX(a, b):
    return _vera.Line_compareX(a, b)

def Line_compareY(a, b):
    return _vera.Line_compareY(a, b)

def Line_compareZ(a, b):
    return _vera.Line_compareZ(a, b)

class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Image_swiginit(self, _vera.new_Image(*args))
    __swig_destroy__ = _vera.delete_Image

    def load(self, _filepath, _vFlip=False):
        return _vera.Image_load(self, _filepath, _vFlip)

    def save(self, _filepath, _vFlip=False):
        return _vera.Image_save(self, _filepath, _vFlip)

    def allocate(self, _width, _height, _channels):
        return _vera.Image_allocate(self, _width, _height, _channels)

    def isAllocated(self):
        return _vera.Image_isAllocated(self)

    def getWidth(self):
        return _vera.Image_getWidth(self)

    def getHeight(self):
        return _vera.Image_getHeight(self)

    def getChannels(self):
        return _vera.Image_getChannels(self)

    def getFilePath(self):
        return _vera.Image_getFilePath(self)

    def at(self, _index):
        return _vera.Image_at(self, _index)

    def size(self):
        return _vera.Image_size(self)

    def getIndex(self, _x, _y):
        return _vera.Image_getIndex(self, _x, _y)

    def getIndexUV(self, _u, _v):
        return _vera.Image_getIndexUV(self, _u, _v)

    def set(self, _array3D, _height, _width, _channels):
        return _vera.Image_set(self, _array3D, _height, _width, _channels)

    def setValue(self, *args):
        return _vera.Image_setValue(self, *args)

    def setChannels(self, _channels):
        return _vera.Image_setChannels(self, _channels)

    def setColor(self, *args):
        return _vera.Image_setColor(self, *args)

    def setColors(self, _array2D, _m, _n):
        return _vera.Image_setColors(self, _array2D, _m, _n)

    def get(self, _array3D, _height, _width, _channels):
        return _vera.Image_get(self, _array3D, _height, _width, _channels)

    def getValue(self, _index):
        return _vera.Image_getValue(self, _index)

    def getColor(self, _index):
        return _vera.Image_getColor(self, _index)

    def __add__(self, _value):
        return _vera.Image___add__(self, _value)

    def __sub__(self, _value):
        return _vera.Image___sub__(self, _value)

    def __mul__(self, _value):
        return _vera.Image___mul__(self, _value)

    def __truediv__(self, *args):
        return _vera.Image___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, _value):
        return _vera.Image___iadd__(self, _value)

    def __isub__(self, _value):
        return _vera.Image___isub__(self, _value)

    def __imul__(self, _value):
        return _vera.Image___imul__(self, _value)

    def __itruediv__(self, *args):
        return _vera.Image___itruediv__(self, *args)
    __idiv__ = __itruediv__


    name = property(_vera.Image_name_get, _vera.Image_name_set)

# Register Image in _vera:
_vera.Image_swigregister(Image)

ALIGN_LEFT = _vera.ALIGN_LEFT
ALIGN_CENTER = _vera.ALIGN_CENTER
ALIGN_RIGHT = _vera.ALIGN_RIGHT
ALIGN_TOP = _vera.ALIGN_TOP
ALIGN_MIDDLE = _vera.ALIGN_MIDDLE
ALIGN_BOTTOM = _vera.ALIGN_BOTTOM
ALIGN_BASELINE = _vera.ALIGN_BASELINE
class SkyData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    groundAlbedo = property(_vera.SkyData_groundAlbedo_get, _vera.SkyData_groundAlbedo_set)
    elevation = property(_vera.SkyData_elevation_get, _vera.SkyData_elevation_set)
    azimuth = property(_vera.SkyData_azimuth_get, _vera.SkyData_azimuth_set)
    turbidity = property(_vera.SkyData_turbidity_get, _vera.SkyData_turbidity_set)
    change = property(_vera.SkyData_change_get, _vera.SkyData_change_set)

    def __init__(self):
        _vera.SkyData_swiginit(self, _vera.new_SkyData())
    __swig_destroy__ = _vera.delete_SkyData

# Register SkyData in _vera:
_vera.SkyData_swigregister(SkyData)

BLEND_NONE = _vera.BLEND_NONE
BLEND_ALPHA = _vera.BLEND_ALPHA
BLEND_ADD = _vera.BLEND_ADD
BLEND_MULTIPLY = _vera.BLEND_MULTIPLY
BLEND_SCREEN = _vera.BLEND_SCREEN
BLEND_SUBSTRACT = _vera.BLEND_SUBSTRACT
CULL_NONE = _vera.CULL_NONE
CULL_FRONT = _vera.CULL_FRONT
CULL_BACK = _vera.CULL_BACK
CULL_BOTH = _vera.CULL_BOTH

def blendMode(_mode):
    return _vera.blendMode(_mode)

def cullingMode(_mode):
    return _vera.cullingMode(_mode)
class HaveDefines(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.HaveDefines_swiginit(self, _vera.new_HaveDefines())
    __swig_destroy__ = _vera.delete_HaveDefines

    def addDefine(self, *args):
        return _vera.HaveDefines_addDefine(self, *args)

    def delDefine(self, _define):
        return _vera.HaveDefines_delDefine(self, _define)

    def mergeDefines(self, *args):
        return _vera.HaveDefines_mergeDefines(self, *args)

    def replaceDefines(self, _defines):
        return _vera.HaveDefines_replaceDefines(self, _defines)

    def printDefines(self):
        return _vera.HaveDefines_printDefines(self)

# Register HaveDefines in _vera:
_vera.HaveDefines_swigregister(HaveDefines)


def getFaceDirection(_id):
    return _vera.getFaceDirection(_id)
LINEAR = _vera.LINEAR
NEAREST = _vera.NEAREST
REPEAT = _vera.REPEAT
CLAMP = _vera.CLAMP

def getFilter(_filter):
    return _vera.getFilter(_filter)

def getMagnificationFilter(_filter):
    return _vera.getMagnificationFilter(_filter)

def getMinificationFilter(_filter):
    return _vera.getMinificationFilter(_filter)

def getWrap(_wrap):
    return _vera.getWrap(_wrap)

def screenshot(*args):
    return _vera.screenshot(*args)
JUST_TEXTURE = _vera.JUST_TEXTURE
BUMP_TEXTURE = _vera.BUMP_TEXTURE
CUBE_TEXTURE = _vera.CUBE_TEXTURE
STREAM_SEQUENCE_TEXTURE = _vera.STREAM_SEQUENCE_TEXTURE
STREAM_VIDEO_TEXTURE = _vera.STREAM_VIDEO_TEXTURE
STREAM_AUDIO_TEXTURE = _vera.STREAM_AUDIO_TEXTURE
class Texture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Texture_swiginit(self, _vera.new_Texture(*args))
    __swig_destroy__ = _vera.delete_Texture

    def load(self, *args):
        return _vera.Texture_load(self, *args)

    def update(self, _x, _y, _width, _height, _data):
        return _vera.Texture_update(self, _x, _y, _width, _height, _data)

    def clear(self):
        return _vera.Texture_clear(self)

    def loaded(self):
        return _vera.Texture_loaded(self)

    def getTextureId(self):
        return _vera.Texture_getTextureId(self)

    def getFilePath(self):
        return _vera.Texture_getFilePath(self)

    def getWidth(self):
        return _vera.Texture_getWidth(self)

    def getHeight(self):
        return _vera.Texture_getHeight(self)

    def bind(self):
        return _vera.Texture_bind(self)

    def unbind(self):
        return _vera.Texture_unbind(self)

# Register Texture in _vera:
_vera.Texture_swigregister(Texture)
cvar = _vera.cvar
cubemapFaceId = cvar.cubemapFaceId
cubemapDir = cvar.cubemapDir
cubemapX = cvar.cubemapX
cubemapY = cvar.cubemapY

class TextureBump(Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def load(self, _filepath, _vFlip):
        return _vera.TextureBump_load(self, _filepath, _vFlip)

    def __init__(self):
        _vera.TextureBump_swiginit(self, _vera.new_TextureBump())
    __swig_destroy__ = _vera.delete_TextureBump

# Register TextureBump in _vera:
_vera.TextureBump_swigregister(TextureBump)

class TextureCube(Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.TextureCube_swiginit(self, _vera.new_TextureCube())
    __swig_destroy__ = _vera.delete_TextureCube

    def load(self, *args):
        return _vera.TextureCube_load(self, *args)

    def bind(self):
        return _vera.TextureCube_bind(self)
    SH = property(_vera.TextureCube_SH_get, _vera.TextureCube_SH_set)

# Register TextureCube in _vera:
_vera.TextureCube_swigregister(TextureCube)

class TextureStream(Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vera.delete_TextureStream

    def setSpeed(self, _speed):
        return _vera.TextureStream_setSpeed(self, _speed)

    def setTime(self, _time):
        return _vera.TextureStream_setTime(self, _time)

    def setPct(self, _pct):
        return _vera.TextureStream_setPct(self, _pct)

    def setPrevTextures(self, _total):
        return _vera.TextureStream_setPrevTextures(self, _total)

    def getPrevTexturesTotal(self):
        return _vera.TextureStream_getPrevTexturesTotal(self)

    def getPrevTextureId(self, _index):
        return _vera.TextureStream_getPrevTextureId(self, _index)

    def getPrevTextureIds(self):
        return _vera.TextureStream_getPrevTextureIds(self)

    def getPrevTextureIdsPtr(self):
        return _vera.TextureStream_getPrevTextureIdsPtr(self)

    def getFps(self):
        return _vera.TextureStream_getFps(self)

    def getDuration(self):
        return _vera.TextureStream_getDuration(self)

    def getTime(self):
        return _vera.TextureStream_getTime(self)

    def getPct(self):
        return _vera.TextureStream_getPct(self)

    def getTotalFrames(self):
        return _vera.TextureStream_getTotalFrames(self)

    def getCurrentFrame(self):
        return _vera.TextureStream_getCurrentFrame(self)

    def getSpeed(self):
        return _vera.TextureStream_getSpeed(self)

    def play(self):
        return _vera.TextureStream_play(self)

    def stop(self):
        return _vera.TextureStream_stop(self)

    def isPlaying(self):
        return _vera.TextureStream_isPlaying(self)

    def update(self):
        return _vera.TextureStream_update(self)

    def restart(self):
        return _vera.TextureStream_restart(self)

    def bind(self):
        return _vera.TextureStream_bind(self)

    def __init__(self):
        _vera.TextureStream_swiginit(self, _vera.new_TextureStream())

# Register TextureStream in _vera:
_vera.TextureStream_swigregister(TextureStream)

class TextureStreamSequence(TextureStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.TextureStreamSequence_swiginit(self, _vera.new_TextureStreamSequence())
    __swig_destroy__ = _vera.delete_TextureStreamSequence

    def getDuration(self):
        return _vera.TextureStreamSequence_getDuration(self)

    def getTime(self):
        return _vera.TextureStreamSequence_getTime(self)

    def getTotalFrames(self):
        return _vera.TextureStreamSequence_getTotalFrames(self)

    def getCurrentFrame(self):
        return _vera.TextureStreamSequence_getCurrentFrame(self)

    def load(self, _filepath, _vFlip):
        return _vera.TextureStreamSequence_load(self, _filepath, _vFlip)

    def update(self):
        return _vera.TextureStreamSequence_update(self)

    def restart(self):
        return _vera.TextureStreamSequence_restart(self)

    def clear(self):
        return _vera.TextureStreamSequence_clear(self)

# Register TextureStreamSequence in _vera:
_vera.TextureStreamSequence_swigregister(TextureStreamSequence)

COLOR_TEXTURE = _vera.COLOR_TEXTURE
COLOR_TEXTURE_DEPTH_BUFFER = _vera.COLOR_TEXTURE_DEPTH_BUFFER
COLOR_FLOAT_TEXTURE = _vera.COLOR_FLOAT_TEXTURE
COLOR_DEPTH_TEXTURES = _vera.COLOR_DEPTH_TEXTURES
GBUFFER_TEXTURE = _vera.GBUFFER_TEXTURE
DEPTH_TEXTURE = _vera.DEPTH_TEXTURE
class Fbo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Fbo_swiginit(self, _vera.new_Fbo())
    __swig_destroy__ = _vera.delete_Fbo

    def allocate(self, *args):
        return _vera.Fbo_allocate(self, *args)

    def bind(self):
        return _vera.Fbo_bind(self)

    def unbind(self):
        return _vera.Fbo_unbind(self)

    def getId(self):
        return _vera.Fbo_getId(self)

    def getType(self):
        return _vera.Fbo_getType(self)

    def getTextureId(self):
        return _vera.Fbo_getTextureId(self)

    def isAllocated(self):
        return _vera.Fbo_isAllocated(self)

    def haveDepthBuffer(self):
        return _vera.Fbo_haveDepthBuffer(self)

    def haveDepthTexture(self):
        return _vera.Fbo_haveDepthTexture(self)

    def getDepthTextureId(self):
        return _vera.Fbo_getDepthTextureId(self)

    def getWidth(self):
        return _vera.Fbo_getWidth(self)

    def getHeight(self):
        return _vera.Fbo_getHeight(self)
    fixed = property(_vera.Fbo_fixed_get, _vera.Fbo_fixed_set)

# Register Fbo in _vera:
_vera.Fbo_swigregister(Fbo)

class PingPong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.PingPong_swiginit(self, _vera.new_PingPong())
    __swig_destroy__ = _vera.delete_PingPong

    def allocate(self, *args):
        return _vera.PingPong_allocate(self, *args)

    def swap(self):
        return _vera.PingPong_swap(self)

    def clear(self, _alpha=0.0):
        return _vera.PingPong_clear(self, _alpha)

    def buffer(self, n):
        return _vera.PingPong_buffer(self, n)
    src = property(_vera.PingPong_src_get, _vera.PingPong_src_set)
    dst = property(_vera.PingPong_dst_get, _vera.PingPong_dst_set)

# Register PingPong in _vera:
_vera.PingPong_swigregister(PingPong)

PYRAMID_MAX_LAYERS = _vera.PYRAMID_MAX_LAYERS
class Pyramid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Pyramid_swiginit(self, _vera.new_Pyramid())
    __swig_destroy__ = _vera.delete_Pyramid

    def allocate(self, _width, _height):
        return _vera.Pyramid_allocate(self, _width, _height)

    def isAllocated(self):
        return _vera.Pyramid_isAllocated(self)

    def getDepth(self):
        return _vera.Pyramid_getDepth(self)

    def getResult(self, index=0):
        return _vera.Pyramid_getResult(self, index)

    def getWidth(self):
        return _vera.Pyramid_getWidth(self)

    def getHeight(self):
        return _vera.Pyramid_getHeight(self)

    def process(self, _fbo):
        return _vera.Pyramid_process(self, _fbo)
    _pass = property(_vera.Pyramid__pass_get, _vera.Pyramid__pass_set)
    fixed = property(_vera.Pyramid_fixed_get, _vera.Pyramid_fixed_set)

# Register Pyramid in _vera:
_vera.Pyramid_swigregister(Pyramid)

REVERT_TO_PREVIOUS_SHADER = _vera.REVERT_TO_PREVIOUS_SHADER
SHOW_MAGENTA_SHADER = _vera.SHOW_MAGENTA_SHADER
DONT_KEEP_SHADER = _vera.DONT_KEEP_SHADER
KEEP_BROKEN_SHADER = _vera.KEEP_BROKEN_SHADER
class Shader(HaveDefines):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Shader_swiginit(self, _vera.new_Shader())
    __swig_destroy__ = _vera.delete_Shader

    def setSource(self, _fragmentSrc, _vertexSrc):
        return _vera.Shader_setSource(self, _fragmentSrc, _vertexSrc)

    def setDefaultErrorBehaviour(self, _error):
        return _vera.Shader_setDefaultErrorBehaviour(self, _error)

    def load(self, *args):
        return _vera.Shader_load(self, *args)

    def use(self):
        return _vera.Shader_use(self)

    def getProgram(self):
        return _vera.Shader_getProgram(self)

    def getFragmentShader(self):
        return _vera.Shader_getFragmentShader(self)

    def getVertexShader(self):
        return _vera.Shader_getVertexShader(self)

    def getAttribLocation(self, _attribute):
        return _vera.Shader_getAttribLocation(self, _attribute)

    def getFragmentSource(self):
        return _vera.Shader_getFragmentSource(self)

    def getVertexSource(self):
        return _vera.Shader_getVertexSource(self)

    def inUse(self):
        return _vera.Shader_inUse(self)

    def loaded(self):
        return _vera.Shader_loaded(self)

    def setUniform(self, *args):
        return _vera.Shader_setUniform(self, *args)

    def setUniformTexture(self, *args):
        return _vera.Shader_setUniformTexture(self, *args)

    def setUniformDepthTexture(self, *args):
        return _vera.Shader_setUniformDepthTexture(self, *args)

    def setUniformTextureCube(self, *args):
        return _vera.Shader_setUniformTextureCube(self, *args)

    def detach(self, type):
        return _vera.Shader_detach(self, type)
    textureIndex = property(_vera.Shader_textureIndex_get, _vera.Shader_textureIndex_set)

# Register Shader in _vera:
_vera.Shader_swigregister(Shader)

class VertexAttrib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_vera.VertexAttrib_name_get, _vera.VertexAttrib_name_set)
    size = property(_vera.VertexAttrib_size_get, _vera.VertexAttrib_size_set)
    type = property(_vera.VertexAttrib_type_get, _vera.VertexAttrib_type_set)
    normalized = property(_vera.VertexAttrib_normalized_get, _vera.VertexAttrib_normalized_set)
    offset = property(_vera.VertexAttrib_offset_get, _vera.VertexAttrib_offset_set)

    def __init__(self):
        _vera.VertexAttrib_swiginit(self, _vera.new_VertexAttrib())
    __swig_destroy__ = _vera.delete_VertexAttrib

# Register VertexAttrib in _vera:
_vera.VertexAttrib_swigregister(VertexAttrib)

class VertexLayout(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.VertexLayout_swiginit(self, _vera.new_VertexLayout(*args))
    __swig_destroy__ = _vera.delete_VertexLayout

    def enable(self, _program):
        return _vera.VertexLayout_enable(self, _program)

    def bind(self, _program):
        return _vera.VertexLayout_bind(self, _program)

    def unbind(self, _program):
        return _vera.VertexLayout_unbind(self, _program)

    def getStride(self):
        return _vera.VertexLayout_getStride(self)

    def haveAttrib(self, _attribute):
        return _vera.VertexLayout_haveAttrib(self, _attribute)

    def printAttrib(self):
        return _vera.VertexLayout_printAttrib(self)

# Register VertexLayout in _vera:
_vera.VertexLayout_swigregister(VertexLayout)

VALUE = _vera.VALUE
COLOR = _vera.COLOR
TEXTURE = _vera.TEXTURE
class Material(HaveDefines):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Material_swiginit(self, _vera.new_Material(*args))
    __swig_destroy__ = _vera.delete_Material

    def set(self, *args):
        return _vera.Material_set(self, *args)

    def getName(self):
        return _vera.Material_getName(self)

    def haveProperty(self, _property):
        return _vera.Material_haveProperty(self, _property)

    def getImagePath(self, _property):
        return _vera.Material_getImagePath(self, _property)

    def getImage(self, _property):
        return _vera.Material_getImage(self, _property)

    def getColor(self, *args):
        return _vera.Material_getColor(self, *args)

    def getValue(self, *args):
        return _vera.Material_getValue(self, *args)

    def feedProperties(self, _shader):
        return _vera.Material_feedProperties(self, _shader)
    illuminationModel = property(_vera.Material_illuminationModel_get, _vera.Material_illuminationModel_set)
    name = property(_vera.Material_name_get, _vera.Material_name_set)
    properties = property(_vera.Material_properties_get, _vera.Material_properties_set)
    values = property(_vera.Material_values_get, _vera.Material_values_set)
    colors = property(_vera.Material_colors_get, _vera.Material_colors_set)
    textures = property(_vera.Material_textures_get, _vera.Material_textures_set)
    texturesPaths = property(_vera.Material_texturesPaths_get, _vera.Material_texturesPaths_set)

# Register Material in _vera:
_vera.Material_swigregister(Material)

class Triangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Triangle_swiginit(self, _vera.new_Triangle(*args))
    __swig_destroy__ = _vera.delete_Triangle

    def set(self, _p0, _p1, _p2):
        return _vera.Triangle_set(self, _p0, _p1, _p2)

    def setColors(self, _p0, _p1, _p2):
        return _vera.Triangle_setColors(self, _p0, _p1, _p2)

    def setNormals(self, _p0, _p1, _p2):
        return _vera.Triangle_setNormals(self, _p0, _p1, _p2)

    def setTexCoords(self, _p0, _p1, _p2):
        return _vera.Triangle_setTexCoords(self, _p0, _p1, _p2)

    def setTangents(self, _p0, _p1, _p2):
        return _vera.Triangle_setTangents(self, _p0, _p1, _p2)

    def containsPoint(self, _p):
        return _vera.Triangle_containsPoint(self, _p)

    def setVertex(self, _index, _vertex):
        return _vera.Triangle_setVertex(self, _index, _vertex)

    def getVertex(self, *args):
        return _vera.Triangle_getVertex(self, *args)

    def getCentroid(self):
        return _vera.Triangle_getCentroid(self)

    def getMin(self):
        return _vera.Triangle_getMin(self)

    def getMax(self):
        return _vera.Triangle_getMax(self)

    def getBarycentricOf(self, _p):
        return _vera.Triangle_getBarycentricOf(self, _p)

    @staticmethod
    def getBarycentric(*args):
        return _vera.Triangle_getBarycentric(*args)

    def haveColors(self):
        return _vera.Triangle_haveColors(self)

    def setColor(self, *args):
        return _vera.Triangle_setColor(self, *args)

    def getColor(self, *args):
        return _vera.Triangle_getColor(self, *args)

    def haveNormals(self):
        return _vera.Triangle_haveNormals(self)

    def setNormal(self, _index, _normal):
        return _vera.Triangle_setNormal(self, _index, _normal)

    def getNormal(self, *args):
        return _vera.Triangle_getNormal(self, *args)

    def haveTexCoords(self):
        return _vera.Triangle_haveTexCoords(self)

    def setTexCoord(self, _index, _texcoord):
        return _vera.Triangle_setTexCoord(self, _index, _texcoord)

    def getTexCoord(self, *args):
        return _vera.Triangle_getTexCoord(self, *args)

    def haveTangents(self):
        return _vera.Triangle_haveTangents(self)

    def setTangent(self, _index, _tangent):
        return _vera.Triangle_setTangent(self, _index, _tangent)

    def getTangent(self, *args):
        return _vera.Triangle_getTangent(self, *args)
    material = property(_vera.Triangle_material_get, _vera.Triangle_material_set)

    def getClosestPoint(self, _p):
        return _vera.Triangle_getClosestPoint(self, _p)

    def getClosestDistance(self, _p):
        return _vera.Triangle_getClosestDistance(self, _p)

    def getClosestSignedDistance(self, _p):
        return _vera.Triangle_getClosestSignedDistance(self, _p)

    def getClosestRGBSignedDistance(self, _p):
        return _vera.Triangle_getClosestRGBSignedDistance(self, _p)

    @staticmethod
    def compare(_a, _b, _axis):
        return _vera.Triangle_compare(_a, _b, _axis)

    @staticmethod
    def compareX(a, b):
        return _vera.Triangle_compareX(a, b)

    @staticmethod
    def compareY(a, b):
        return _vera.Triangle_compareY(a, b)

    @staticmethod
    def compareZ(a, b):
        return _vera.Triangle_compareZ(a, b)

# Register Triangle in _vera:
_vera.Triangle_swigregister(Triangle)

def Triangle_getBarycentric(*args):
    return _vera.Triangle_getBarycentric(*args)

def Triangle_compare(_a, _b, _axis):
    return _vera.Triangle_compare(_a, _b, _axis)

def Triangle_compareX(a, b):
    return _vera.Triangle_compareX(a, b)

def Triangle_compareY(a, b):
    return _vera.Triangle_compareY(a, b)

def Triangle_compareZ(a, b):
    return _vera.Triangle_compareZ(a, b)

class BoundingBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_vera.BoundingBox_min_get, _vera.BoundingBox_min_set)
    max = property(_vera.BoundingBox_max_get, _vera.BoundingBox_max_set)

    def __init__(self):
        _vera.BoundingBox_swiginit(self, _vera.new_BoundingBox())

    def set(self, *args):
        return _vera.BoundingBox_set(self, *args)

    def getWidth(self):
        return _vera.BoundingBox_getWidth(self)

    def getHeight(self):
        return _vera.BoundingBox_getHeight(self)

    def getDepth(self):
        return _vera.BoundingBox_getDepth(self)

    def getCenter(self):
        return _vera.BoundingBox_getCenter(self)

    def getDiagonal(self):
        return _vera.BoundingBox_getDiagonal(self)

    def get2DBoundingBox(self):
        return _vera.BoundingBox_get2DBoundingBox(self)

    def getArea(self):
        return _vera.BoundingBox_getArea(self)

    def getClosestX(self, _x):
        return _vera.BoundingBox_getClosestX(self, _x)

    def getClosestY(self, _y):
        return _vera.BoundingBox_getClosestY(self, _y)

    def getClosestZ(self, _z):
        return _vera.BoundingBox_getClosestZ(self, _z)

    def getClosestOn(self, _v, _axis):
        return _vera.BoundingBox_getClosestOn(self, _v, _axis)

    def getClosestPoint(self, *args):
        return _vera.BoundingBox_getClosestPoint(self, *args)

    def getDistanceToClosest(self, *args):
        return _vera.BoundingBox_getDistanceToClosest(self, *args)

    def containsX(self, _x):
        return _vera.BoundingBox_containsX(self, _x)

    def containsY(self, _y):
        return _vera.BoundingBox_containsY(self, _y)

    def containsZ(self, _z):
        return _vera.BoundingBox_containsZ(self, _z)

    def contains(self, *args):
        return _vera.BoundingBox_contains(self, *args)

    def intersects(self, *args):
        return _vera.BoundingBox_intersects(self, *args)

    def expand(self, *args):
        return _vera.BoundingBox_expand(self, *args)

    def square(self):
        return _vera.BoundingBox_square(self)

    def clean(self):
        return _vera.BoundingBox_clean(self)
    __swig_destroy__ = _vera.delete_BoundingBox

# Register BoundingBox in _vera:
_vera.BoundingBox_swigregister(BoundingBox)

SPLIT_BALANCED = _vera.SPLIT_BALANCED
SPLIT_MIDPOINT = _vera.SPLIT_MIDPOINT
SPLIT_SORTED_MIDPOINT = _vera.SPLIT_SORTED_MIDPOINT
SPLIT_BALANCED_MIDPOINT = _vera.SPLIT_BALANCED_MIDPOINT
SPLIT_SAH = _vera.SPLIT_SAH
class BVH(BoundingBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.BVH_swiginit(self, _vera.new_BVH(*args))
    __swig_destroy__ = _vera.delete_BVH

    def load(self, *args):
        return _vera.BVH_load(self, *args)

    def hit(self, _ray, _minDistance, _maxDistance):
        return _vera.BVH_hit(self, _ray, _minDistance, _maxDistance)

    def getCost(self):
        return _vera.BVH_getCost(self)

    def getClosestPointOnTriangle(self, _point):
        return _vera.BVH_getClosestPointOnTriangle(self, _point)

    def getClosestDistance(self, _point):
        return _vera.BVH_getClosestDistance(self, _point)

    def getClosestSignedDistance(self, _point, _refinement=0.0):
        return _vera.BVH_getClosestSignedDistance(self, _point, _refinement)

    def getClosestRGBSignedDistance(self, _point, _refinement=0.0):
        return _vera.BVH_getClosestRGBSignedDistance(self, _point, _refinement)

    def clear(self):
        return _vera.BVH_clear(self)
    elements = property(_vera.BVH_elements_get, _vera.BVH_elements_set)
    left = property(_vera.BVH_left_get, _vera.BVH_left_set)
    right = property(_vera.BVH_right_get, _vera.BVH_right_set)
    axis = property(_vera.BVH_axis_get, _vera.BVH_axis_set)
    leaf = property(_vera.BVH_leaf_get, _vera.BVH_leaf_set)

# Register BVH in _vera:
_vera.BVH_swigregister(BVH)

class Plane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Plane_swiginit(self, _vera.new_Plane(*args))

    def set(self, *args):
        return _vera.Plane_set(self, *args)

    def setNormal(self, _normal):
        return _vera.Plane_setNormal(self, _normal)

    def getNormal(self):
        return _vera.Plane_getNormal(self)

    def setOrigin(self, _pos):
        return _vera.Plane_setOrigin(self, _pos)

    def getOrigin(self):
        return _vera.Plane_getOrigin(self)

    def getDCoeff(self):
        return _vera.Plane_getDCoeff(self)
    __swig_destroy__ = _vera.delete_Plane

# Register Plane in _vera:
_vera.Plane_swigregister(Plane)

POINTS = _vera.POINTS
LINES = _vera.LINES
LINE_STRIP = _vera.LINE_STRIP
LINE_LOOP = _vera.LINE_LOOP
TRIANGLES = _vera.TRIANGLES
TRIANGLE_STRIP = _vera.TRIANGLE_STRIP
TRIANGLE_FAN = _vera.TRIANGLE_FAN
class Mesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Mesh_swiginit(self, _vera.new_Mesh(*args))
    __swig_destroy__ = _vera.delete_Mesh

    def append(self, _mesh):
        return _vera.Mesh_append(self, _mesh)

    def clear(self):
        return _vera.Mesh_clear(self)

    def setDrawMode(self, *args):
        return _vera.Mesh_setDrawMode(self, *args)

    def getDrawMode(self):
        return _vera.Mesh_getDrawMode(self)

    def setMaterial(self, _material):
        return _vera.Mesh_setMaterial(self, _material)

    def getMaterial(self):
        return _vera.Mesh_getMaterial(self)

    def haveMaterial(self):
        return _vera.Mesh_haveMaterial(self)

    def addVertex(self, _point):
        return _vera.Mesh_addVertex(self, _point)

    def addVertices(self, *args):
        return _vera.Mesh_addVertices(self, *args)

    def haveVertices(self):
        return _vera.Mesh_haveVertices(self)

    def clearVertices(self):
        return _vera.Mesh_clearVertices(self)

    def getVerticesTotal(self):
        return _vera.Mesh_getVerticesTotal(self)

    def getVertex(self, _index):
        return _vera.Mesh_getVertex(self, _index)

    def getVertices(self):
        return _vera.Mesh_getVertices(self)

    def setColor(self, _color):
        return _vera.Mesh_setColor(self, _color)

    def addColor(self, _color):
        return _vera.Mesh_addColor(self, _color)

    def addColors(self, _colors):
        return _vera.Mesh_addColors(self, _colors)

    def haveColors(self):
        return _vera.Mesh_haveColors(self)

    def clearColors(self):
        return _vera.Mesh_clearColors(self)

    def getColorsTotal(self):
        return _vera.Mesh_getColorsTotal(self)

    def getColor(self, _index):
        return _vera.Mesh_getColor(self, _index)

    def getColors(self):
        return _vera.Mesh_getColors(self)

    def addNormal(self, _normal):
        return _vera.Mesh_addNormal(self, _normal)

    def addNormals(self, _normals):
        return _vera.Mesh_addNormals(self, _normals)

    def haveNormals(self):
        return _vera.Mesh_haveNormals(self)

    def getNormal(self, _index):
        return _vera.Mesh_getNormal(self, _index)

    def getNormalsTotal(self):
        return _vera.Mesh_getNormalsTotal(self)

    def getNormals(self):
        return _vera.Mesh_getNormals(self)

    def clearNormals(self):
        return _vera.Mesh_clearNormals(self)

    def computeNormals(self):
        return _vera.Mesh_computeNormals(self)

    def smoothNormals(self, _angle):
        return _vera.Mesh_smoothNormals(self, _angle)

    def invertNormals(self):
        return _vera.Mesh_invertNormals(self)

    def flatNormals(self):
        return _vera.Mesh_flatNormals(self)

    def addTangent(self, _tangent):
        return _vera.Mesh_addTangent(self, _tangent)

    def haveTangents(self):
        return _vera.Mesh_haveTangents(self)

    def getTangent(self, _index):
        return _vera.Mesh_getTangent(self, _index)

    def getTangentsTotal(self):
        return _vera.Mesh_getTangentsTotal(self)

    def getTangents(self):
        return _vera.Mesh_getTangents(self)

    def clearTangets(self):
        return _vera.Mesh_clearTangets(self)

    def computeTangents(self):
        return _vera.Mesh_computeTangents(self)

    def addTexCoord(self, _uv):
        return _vera.Mesh_addTexCoord(self, _uv)

    def addTexCoords(self, _uvs):
        return _vera.Mesh_addTexCoords(self, _uvs)

    def haveTexCoords(self):
        return _vera.Mesh_haveTexCoords(self)

    def getTexCoordsTotal(self):
        return _vera.Mesh_getTexCoordsTotal(self)

    def getTexCoord(self, _index):
        return _vera.Mesh_getTexCoord(self, _index)

    def getTexCoords(self):
        return _vera.Mesh_getTexCoords(self)

    def clearTexCoords(self):
        return _vera.Mesh_clearTexCoords(self)

    def addIndex(self, _i):
        return _vera.Mesh_addIndex(self, _i)

    def addIndices(self, *args):
        return _vera.Mesh_addIndices(self, *args)

    def haveIndices(self):
        return _vera.Mesh_haveIndices(self)

    def getIndex(self, _index):
        return _vera.Mesh_getIndex(self, _index)

    def getIndicesTotal(self):
        return _vera.Mesh_getIndicesTotal(self)

    def getIndices(self):
        return _vera.Mesh_getIndices(self)

    def clearIndices(self):
        return _vera.Mesh_clearIndices(self)

    def invertWindingOrder(self):
        return _vera.Mesh_invertWindingOrder(self)

    def addTriangle(self, _tri):
        return _vera.Mesh_addTriangle(self, _tri)

    def addTriangles(self, _triangles):
        return _vera.Mesh_addTriangles(self, _triangles)

    def addTriangleIndices(self, index1, index2, index3):
        return _vera.Mesh_addTriangleIndices(self, index1, index2, index3)

    def getTriangles(self):
        return _vera.Mesh_getTriangles(self)

    def getTrianglesIndices(self):
        return _vera.Mesh_getTrianglesIndices(self)

# Register Mesh in _vera:
_vera.Mesh_swigregister(Mesh)

ORTHO = _vera.ORTHO
PERSPECTIVE = _vera.PERSPECTIVE
PERSPECTIVE_VIRTUAL_OFFSET = _vera.PERSPECTIVE_VIRTUAL_OFFSET
CUSTOM = _vera.CUSTOM
class Camera(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Camera_swiginit(self, _vera.new_Camera())
    __swig_destroy__ = _vera.delete_Camera

    def setProjection(self, *args):
        return _vera.Camera_setProjection(self, *args)

    def setFOV(self, _fov):
        return _vera.Camera_setFOV(self, _fov)

    def setAspect(self, _aspect):
        return _vera.Camera_setAspect(self, _aspect)

    def setViewport(self, _width, _height):
        return _vera.Camera_setViewport(self, _width, _height)

    def setClipping(self, _near_clip_distance, _far_clip_distance):
        return _vera.Camera_setClipping(self, _near_clip_distance, _far_clip_distance)

    def setDistance(self, _distance):
        return _vera.Camera_setDistance(self, _distance)

    def setTarget(self, *args):
        return _vera.Camera_setTarget(self, *args)

    def setVirtualOffset(self, _scale, _currentViewIndex, _totalViews, aspect=1.0):
        return _vera.Camera_setVirtualOffset(self, _scale, _currentViewIndex, _totalViews, aspect)

    def setExposure(self, _aperture, _shutterSpeed, _sensitivity):
        return _vera.Camera_setExposure(self, _aperture, _shutterSpeed, _sensitivity)

    def worldToCamera(self, *args):
        return _vera.Camera_worldToCamera(self, *args)

    def worldToScreen(self, *args):
        return _vera.Camera_worldToScreen(self, *args)

    def getProjectionType(self):
        return _vera.Camera_getProjectionType(self)

    def getFOV(self):
        return _vera.Camera_getFOV(self)

    def getAspect(self):
        return _vera.Camera_getAspect(self)

    def getFarClip(self):
        return _vera.Camera_getFarClip(self)

    def getNearClip(self):
        return _vera.Camera_getNearClip(self)

    def getDistance(self):
        return _vera.Camera_getDistance(self)

    def getEv100(self):
        return _vera.Camera_getEv100(self)

    def getExposure(self):
        return _vera.Camera_getExposure(self)

    def getAperture(self):
        return _vera.Camera_getAperture(self)

    def getShutterSpeed(self):
        return _vera.Camera_getShutterSpeed(self)

    def getSensitivity(self):
        return _vera.Camera_getSensitivity(self)

    def getTarget(self):
        return _vera.Camera_getTarget(self)

    def getPosition(self):
        return _vera.Camera_getPosition(self)

    def getViewMatrix(self):
        return _vera.Camera_getViewMatrix(self)

    def getNormalMatrix(self):
        return _vera.Camera_getNormalMatrix(self)

    def getInverseViewMatrix(self):
        return _vera.Camera_getInverseViewMatrix(self)

    def getProjectionMatrix(self):
        return _vera.Camera_getProjectionMatrix(self)

    def getProjectionViewMatrix(self):
        return _vera.Camera_getProjectionViewMatrix(self)

    def getInverseProjectionMatrix(self):
        return _vera.Camera_getInverseProjectionMatrix(self)

# Register Camera in _vera:
_vera.Camera_swigregister(Camera)

LIGHT_DIRECTIONAL = _vera.LIGHT_DIRECTIONAL
LIGHT_POINT = _vera.LIGHT_POINT
LIGHT_SPOT = _vera.LIGHT_SPOT
class Light(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Light_swiginit(self, _vera.new_Light(*args))
    __swig_destroy__ = _vera.delete_Light

    def setType(self, _type):
        return _vera.Light_setType(self, _type)

    def getLightType(self):
        return _vera.Light_getLightType(self)

    def getMVPMatrix(self, _model, _area):
        return _vera.Light_getMVPMatrix(self, _model, _area)

    def getViewMatrix(self):
        return _vera.Light_getViewMatrix(self)

    def getProjectionMatrix(self):
        return _vera.Light_getProjectionMatrix(self)

    def getBiasMVPMatrix(self):
        return _vera.Light_getBiasMVPMatrix(self)

    def getShadowMap(self):
        return _vera.Light_getShadowMap(self)

    def getShadowMapNear(self):
        return _vera.Light_getShadowMapNear(self)

    def getShadowMapFar(self):
        return _vera.Light_getShadowMapFar(self)

    def bindShadowMap(self):
        return _vera.Light_bindShadowMap(self)

    def unbindShadowMap(self):
        return _vera.Light_unbindShadowMap(self)
    color = property(_vera.Light_color_get, _vera.Light_color_set)
    direction = property(_vera.Light_direction_get, _vera.Light_direction_set)
    intensity = property(_vera.Light_intensity_get, _vera.Light_intensity_set)
    falloff = property(_vera.Light_falloff_get, _vera.Light_falloff_set)

# Register Light in _vera:
_vera.Light_swigregister(Light)

MAX_INDEX_VALUE = _vera.MAX_INDEX_VALUE
class Vbo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Vbo_swiginit(self, _vera.new_Vbo(*args))
    __swig_destroy__ = _vera.delete_Vbo

    def load(self, *args):
        return _vera.Vbo_load(self, *args)

    def getDrawMode(self):
        return _vera.Vbo_getDrawMode(self)

    def getVertexLayout(self):
        return _vera.Vbo_getVertexLayout(self)

    def setDrawType(self, *args):
        return _vera.Vbo_setDrawType(self, *args)

    def setDrawMode(self, *args):
        return _vera.Vbo_setDrawMode(self, *args)

    def setVertexLayout(self, _vertexLayout):
        return _vera.Vbo_setVertexLayout(self, _vertexLayout)

    def addVertex(self, _vertex):
        return _vera.Vbo_addVertex(self, _vertex)

    def addVertices(self, _vertices, _nVertices):
        return _vera.Vbo_addVertices(self, _vertices, _nVertices)

    def addIndex(self, _index):
        return _vera.Vbo_addIndex(self, _index)

    def addIndices(self, _indices, _nIndices):
        return _vera.Vbo_addIndices(self, _indices, _nIndices)

    def upload(self):
        return _vera.Vbo_upload(self)

    def render(self, *args):
        return _vera.Vbo_render(self, *args)

    def printInfo(self):
        return _vera.Vbo_printInfo(self)

# Register Vbo in _vera:
_vera.Vbo_swigregister(Vbo)

EFFECT_NONE = _vera.EFFECT_NONE
EFFECT_BLUR = _vera.EFFECT_BLUR
EFFECT_GROW = _vera.EFFECT_GROW
EFFECT_DISTANCE_FIELD = _vera.EFFECT_DISTANCE_FIELD
class Font(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Font_swiginit(self, _vera.new_Font(*args))
    __swig_destroy__ = _vera.delete_Font

    def load(self, *args):
        return _vera.Font_load(self, *args)

    def loadDefault(self):
        return _vera.Font_loadDefault(self)

    def setSize(self, _size):
        return _vera.Font_setSize(self, _size)

    def setAlign(self, *args):
        return _vera.Font_setAlign(self, *args)

    def setEffect(self, _effect):
        return _vera.Font_setEffect(self, _effect)

    def setBlurAmount(self, _blur):
        return _vera.Font_setBlurAmount(self, _blur)

    def setColor(self, *args):
        return _vera.Font_setColor(self, *args)

    def setAngle(self, _angle):
        return _vera.Font_setAngle(self, _angle)

    def getHeight(self):
        return _vera.Font_getHeight(self)

    def getBoundingBox(self, *args):
        return _vera.Font_getBoundingBox(self, *args)

    def render(self, *args):
        return _vera.Font_render(self, *args)

# Register Font in _vera:
_vera.Font_swigregister(Font)

class Model(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Model_swiginit(self, _vera.new_Model(*args))
    __swig_destroy__ = _vera.delete_Model

    def loaded(self):
        return _vera.Model_loaded(self)

    def addDefine(self, *args):
        return _vera.Model_addDefine(self, *args)

    def delDefine(self, _define):
        return _vera.Model_delDefine(self, _define)

    def clear(self):
        return _vera.Model_clear(self)

    def setGeom(self, _mesh):
        return _vera.Model_setGeom(self, _mesh)

    def setName(self, _str):
        return _vera.Model_setName(self, _str)

    def setMaterial(self, _material):
        return _vera.Model_setMaterial(self, _material)

    def setShader(self, _fragStr, _vertStr):
        return _vera.Model_setShader(self, _fragStr, _vertStr)

    def setBufferShader(self, _bufferName, _fragStr, _vertStr):
        return _vera.Model_setBufferShader(self, _bufferName, _fragStr, _vertStr)

    def getName(self):
        return _vera.Model_getName(self)

    def getVbo(self):
        return _vera.Model_getVbo(self)

    def getVboBbox(self):
        return _vera.Model_getVboBbox(self)

    def getArea(self):
        return _vera.Model_getArea(self)

    def getBoundingBox(self):
        return _vera.Model_getBoundingBox(self)

    def getShader(self):
        return _vera.Model_getShader(self)

    def getBufferShader(self, _bufferName):
        return _vera.Model_getBufferShader(self, _bufferName)

    def render(self, *args):
        return _vera.Model_render(self, *args)

    def renderBbox(self, _shader):
        return _vera.Model_renderBbox(self, _shader)

    def printDefines(self):
        return _vera.Model_printDefines(self)

    def printVboInfo(self):
        return _vera.Model_printVboInfo(self)
    mesh = property(_vera.Model_mesh_get, _vera.Model_mesh_set)

# Register Model in _vera:
_vera.Model_swigregister(Model)

LABEL_CENTER = _vera.LABEL_CENTER
LABEL_UP = _vera.LABEL_UP
LABEL_DOWN = _vera.LABEL_DOWN
LABEL_LEFT = _vera.LABEL_LEFT
LABEL_RIGHT = _vera.LABEL_RIGHT
LABEL_LINE_TO_WINDOW_BORDER = _vera.LABEL_LINE_TO_WINDOW_BORDER
class Label(BoundingBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.Label_swiginit(self, _vera.new_Label(*args))

    def setText(self, *args):
        return _vera.Label_setText(self, *args)

    def linkTo(self, *args):
        return _vera.Label_linkTo(self, *args)

    def setType(self, _type):
        return _vera.Label_setType(self, _type)

    def setMargin(self, _margin):
        return _vera.Label_setMargin(self, _margin)

    def getScreenPosition(self):
        return _vera.Label_getScreenPosition(self)

    def getMargin(self):
        return _vera.Label_getMargin(self)

    def getText(self):
        return _vera.Label_getText(self)

    def update(self, _cam=None, _font=None):
        return _vera.Label_update(self, _cam, _font)

    def render(self, _font=None):
        return _vera.Label_render(self, _font)
    bVisible = property(_vera.Label_bVisible_get, _vera.Label_bVisible_set)
    __swig_destroy__ = _vera.delete_Label

# Register Label in _vera:
_vera.Label_swigregister(Label)

class Scene(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vera.Scene_swiginit(self, _vera.new_Scene())
    __swig_destroy__ = _vera.delete_Scene

    def load(self, _name, _verbose=False):
        return _vera.Scene_load(self, _name, _verbose)

    def update(self):
        return _vera.Scene_update(self)

    def clear(self):
        return _vera.Scene_clear(self)
    textures = property(_vera.Scene_textures_get, _vera.Scene_textures_set)

    def addTexture(self, *args):
        return _vera.Scene_addTexture(self, *args)

    def addBumpTexture(self, _name, _path, _flip=True, _verbose=True):
        return _vera.Scene_addBumpTexture(self, _name, _path, _flip, _verbose)

    def printTextures(self):
        return _vera.Scene_printTextures(self)

    def clearTextures(self):
        return _vera.Scene_clearTextures(self)
    streams = property(_vera.Scene_streams_get, _vera.Scene_streams_set)

    def addStreamingTexture(self, _name, _url, _flip=True, _device=False, _verbose=True):
        return _vera.Scene_addStreamingTexture(self, _name, _url, _flip, _device, _verbose)

    def addStreamingAudioTexture(self, _name, device_id, _flip=False, _verbose=True):
        return _vera.Scene_addStreamingAudioTexture(self, _name, device_id, _flip, _verbose)

    def printStreams(self):
        return _vera.Scene_printStreams(self)

    def setStreamPlay(self, _name):
        return _vera.Scene_setStreamPlay(self, _name)

    def setStreamStop(self, _name):
        return _vera.Scene_setStreamStop(self, _name)

    def setStreamRestart(self, _name):
        return _vera.Scene_setStreamRestart(self, _name)

    def getStreamTime(self, _name):
        return _vera.Scene_getStreamTime(self, _name)

    def setStreamTime(self, _name, _time):
        return _vera.Scene_setStreamTime(self, _name, _time)

    def getStreamPct(self, _name):
        return _vera.Scene_getStreamPct(self, _name)

    def setStreamPct(self, _name, _pct):
        return _vera.Scene_setStreamPct(self, _name, _pct)

    def getStreamSpeed(self, _name):
        return _vera.Scene_getStreamSpeed(self, _name)

    def setStreamSpeed(self, _name, _speed):
        return _vera.Scene_setStreamSpeed(self, _name, _speed)

    def setStreamsPlay(self):
        return _vera.Scene_setStreamsPlay(self)

    def setStreamsStop(self):
        return _vera.Scene_setStreamsStop(self)

    def setStreamsRestart(self):
        return _vera.Scene_setStreamsRestart(self)

    def setStreamsPct(self, _pct):
        return _vera.Scene_setStreamsPct(self, _pct)

    def setStreamsTime(self, _time):
        return _vera.Scene_setStreamsTime(self, _time)

    def setStreamsSpeed(self, _speed):
        return _vera.Scene_setStreamsSpeed(self, _speed)

    def setStreamsPrevs(self, _total):
        return _vera.Scene_setStreamsPrevs(self, _total)
    cubemaps = property(_vera.Scene_cubemaps_get, _vera.Scene_cubemaps_set)

    def addCubemap(self, _name, _filename, _verbose=True):
        return _vera.Scene_addCubemap(self, _name, _filename, _verbose)

    def clearCubemaps(self):
        return _vera.Scene_clearCubemaps(self)

    def printCubemaps(self):
        return _vera.Scene_printCubemaps(self)

    def setSunPosition(self, *args):
        return _vera.Scene_setSunPosition(self, *args)

    def setSkyTurbidity(self, _turbidity):
        return _vera.Scene_setSkyTurbidity(self, _turbidity)

    def setGroundAlbedo(self, _albedo):
        return _vera.Scene_setGroundAlbedo(self, _albedo)

    def getSunAzimuth(self):
        return _vera.Scene_getSunAzimuth(self)

    def getSunElevation(self):
        return _vera.Scene_getSunElevation(self)

    def getSkyTurbidity(self):
        return _vera.Scene_getSkyTurbidity(self)

    def getGroundAlbedo(self):
        return _vera.Scene_getGroundAlbedo(self)
    cameras = property(_vera.Scene_cameras_get, _vera.Scene_cameras_set)

    def printCameras(self):
        return _vera.Scene_printCameras(self)

    def clearCameras(self):
        return _vera.Scene_clearCameras(self)
    lights = property(_vera.Scene_lights_get, _vera.Scene_lights_set)

    def printLights(self):
        return _vera.Scene_printLights(self)

    def clearLights(self):
        return _vera.Scene_clearLights(self)
    materials = property(_vera.Scene_materials_get, _vera.Scene_materials_set)

    def printMaterials(self):
        return _vera.Scene_printMaterials(self)

    def clearMaterials(self):
        return _vera.Scene_clearMaterials(self)
    models = property(_vera.Scene_models_get, _vera.Scene_models_set)

    def printModels(self):
        return _vera.Scene_printModels(self)

    def clearModels(self):
        return _vera.Scene_clearModels(self)
    root = property(_vera.Scene_root_get, _vera.Scene_root_set)
    shaders = property(_vera.Scene_shaders_get, _vera.Scene_shaders_set)

    def printShaders(self):
        return _vera.Scene_printShaders(self)

    def clearShaders(self):
        return _vera.Scene_clearShaders(self)
    fonts = property(_vera.Scene_fonts_get, _vera.Scene_fonts_set)

    def addFont(self, _name, _path):
        return _vera.Scene_addFont(self, _name, _path)

    def getDefaultFont(self):
        return _vera.Scene_getDefaultFont(self)

    def printFonts(self):
        return _vera.Scene_printFonts(self)

    def clearFonts(self):
        return _vera.Scene_clearFonts(self)
    labels = property(_vera.Scene_labels_get, _vera.Scene_labels_set)

    def printLabels(self):
        return _vera.Scene_printLabels(self)

    def clearLabels(self):
        return _vera.Scene_clearLabels(self)
    activeCubemap = property(_vera.Scene_activeCubemap_get, _vera.Scene_activeCubemap_set)
    activeCamera = property(_vera.Scene_activeCamera_get, _vera.Scene_activeCamera_set)
    activeFont = property(_vera.Scene_activeFont_get, _vera.Scene_activeFont_set)

# Register Scene in _vera:
_vera.Scene_swigregister(Scene)


def loadPLY(*args):
    return _vera.loadPLY(*args)

def loadSTL(*args):
    return _vera.loadSTL(*args)

def loadOBJ(*args):
    return _vera.loadOBJ(*args)

def loadGLTF(_filename, _scene, _verbose):
    return _vera.loadGLTF(_filename, _scene, _verbose)

def sqrt(_image):
    return _vera.sqrt(_image)

def invert(_image):
    return _vera.invert(_image)

def gamma(_image, _gamma):
    return _vera.gamma(_image, _gamma)

def flip(_image):
    return _vera.flip(_image)

def remap(*args):
    return _vera.remap(*args)

def autolevel(_image):
    return _vera.autolevel(_image)

def threshold(_image, _threshold=0.5):
    return _vera.threshold(_image, _threshold)

def to8bit(_image):
    return _vera.to8bit(_image)

def toNormalmap(_heightmap, _zScale=100.0):
    return _vera.toNormalmap(_heightmap, _zScale)

def toLuma(_image):
    return _vera.toLuma(_image)

def toHeightmap(_terrariumImage):
    return _vera.toHeightmap(_terrariumImage)

def toHueRainbow(_graysale):
    return _vera.toHueRainbow(_graysale)

def mergeChannels(*args):
    return _vera.mergeChannels(*args)

def addAlpha(_rgb, _alpha):
    return _vera.addAlpha(_rgb, _alpha)

def toSdf(*args):
    return _vera.toSdf(*args)

def toSdfLayer(_bvh, _voxel_resolution, _z_layer, _refinement=0.00125):
    return _vera.toSdfLayer(_bvh, _voxel_resolution, _z_layer, _refinement)

def refineSdfLayers(_bvh, _images, _dist):
    return _vera.refineSdfLayers(_bvh, _images, _dist)

def packSprite(_images):
    return _vera.packSprite(_images)

def scaleSprite(_images, _times):
    return _vera.scaleSprite(_images, _times)

def splitChannels(_image):
    return _vera.splitChannels(_image)

def fade(_A, _B, _pct):
    return _vera.fade(_A, _B, _pct)

def lineMesh(_a, _b):
    return _vera.lineMesh(_a, _b)

def lineToMesh(_a, _dir, _size):
    return _vera.lineToMesh(_a, _dir, _size)

def crossMesh(_pos, _width):
    return _vera.crossMesh(_pos, _width)

def rectMesh(_x, _y, _w, _h):
    return _vera.rectMesh(_x, _y, _w, _h)

def axisMesh(_size, _y=0.0):
    return _vera.axisMesh(_size, _y)

def gridMesh(*args):
    return _vera.gridMesh(*args)

def floorMesh(_area, _subD, _y=0.0):
    return _vera.floorMesh(_area, _subD, _y)

def planeMesh(*args):
    return _vera.planeMesh(*args)

def boxMesh(_width, _height, _depth, _resX=1, _resY=1, _resZ=1):
    return _vera.boxMesh(_width, _height, _depth, _resX, _resY, _resZ)

def cubeMesh(*args):
    return _vera.cubeMesh(*args)

def cubeCornersMesh(*args):
    return _vera.cubeCornersMesh(*args)

def sphereMesh(*args):
    return _vera.sphereMesh(*args)

def sphereHalfMesh(_resolution=24, _radius=1.0):
    return _vera.sphereHalfMesh(_resolution, _radius)

def icosphereMesh(_radius, _iterations):
    return _vera.icosphereMesh(_radius, _iterations)

def cylinderMesh(*args):
    return _vera.cylinderMesh(*args)

def coneMesh(*args):
    return _vera.coneMesh(*args)

def toTerrain(_image, _zScale, _maxError=0.001, _baseHeight=0.0, _maxTriangles=0, _maxPoints=0):
    return _vera.toTerrain(_image, _zScale, _maxError, _baseHeight, _maxTriangles, _maxPoints)

def inside(_points, _v):
    return _vera.inside(_points, _v)
class IntersectionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_vera.IntersectionData_position_get, _vera.IntersectionData_position_set)
    direction = property(_vera.IntersectionData_direction_get, _vera.IntersectionData_direction_set)
    distance = property(_vera.IntersectionData_distance_get, _vera.IntersectionData_distance_set)
    hit = property(_vera.IntersectionData_hit_get, _vera.IntersectionData_hit_set)

    def __init__(self):
        _vera.IntersectionData_swiginit(self, _vera.new_IntersectionData())
    __swig_destroy__ = _vera.delete_IntersectionData

# Register IntersectionData in _vera:
_vera.IntersectionData_swigregister(IntersectionData)


def distance(*args):
    return _vera.distance(*args)

def intersection(*args):
    return _vera.intersection(*args)

def dynamicCubemap(*args):
    return _vera.dynamicCubemap(*args)

def skyEquirectangular(_sky, _width, _height):
    return _vera.skyEquirectangular(_sky, _width, _height)

def skyCubemap(_sky, _width):
    return _vera.skyCubemap(_sky, _width)

def urlExists(_filename):
    return _vera.urlExists(_filename)

def haveExt(_filename, _ext):
    return _vera.haveExt(_filename, _ext)

def getExt(_filename):
    return _vera.getExt(_filename)

def getBaseDir(filepath):
    return _vera.getBaseDir(filepath)

def getAbsPath(_filename):
    return _vera.getAbsPath(_filename)

def urlResolve(_filename, _pwd, _include_folders):
    return _vera.urlResolve(_filename, _pwd, _include_folders)

def glob(_pattern):
    return _vera.glob(_pattern)

def loadGlslFrom(*args):
    return _vera.loadGlslFrom(*args)

def encodeBase64(_src, _size):
    return _vera.encodeBase64(_src, _size)

def decodeBase64(_src, _to):
    return _vera.decodeBase64(_src, _to)

def simplify(_pts, _tolerance=0.3):
    return _vera.simplify(_pts, _tolerance)

def getArea(_pts):
    return _vera.getArea(_pts)

def getSimplify(_pts, _tolerance=0.3):
    return _vera.getSimplify(_pts, _tolerance)

def getConvexHull(_pts):
    return _vera.getConvexHull(_pts)

def getCentroid(*args):
    return _vera.getCentroid(*args)

def getBoundingBox(*args):
    return _vera.getBoundingBox(*args)

def calcNormal(_v0, _v1, _v2, _N):
    return _vera.calcNormal(_v0, _v1, _v2, _N)

def transform(*args):
    return _vera.transform(*args)

def scaleX(*args):
    return _vera.scaleX(*args)

def scaleY(*args):
    return _vera.scaleY(*args)

def scaleZ(*args):
    return _vera.scaleZ(*args)

def translateX(*args):
    return _vera.translateX(*args)

def translateY(*args):
    return _vera.translateY(*args)

def translateZ(*args):
    return _vera.translateZ(*args)

def center(*args):
    return _vera.center(*args)
VERT_DEFAULT = _vera.VERT_DEFAULT
FRAG_DEFAULT = _vera.FRAG_DEFAULT
FRAG_DEFAULT_TEXTURE = _vera.FRAG_DEFAULT_TEXTURE
VERT_DEFAULT_SCENE = _vera.VERT_DEFAULT_SCENE
FRAG_DEFAULT_SCENE = _vera.FRAG_DEFAULT_SCENE
VERT_BILLBOARD = _vera.VERT_BILLBOARD
VERT_DYNAMIC_BILLBOARD = _vera.VERT_DYNAMIC_BILLBOARD
FRAG_DYNAMIC_BILLBOARD = _vera.FRAG_DYNAMIC_BILLBOARD
VERT_CUBEMAP = _vera.VERT_CUBEMAP
FRAG_CUBEMAP = _vera.FRAG_CUBEMAP
VERT_ERROR = _vera.VERT_ERROR
FRAG_ERROR = _vera.FRAG_ERROR
VERT_LIGHT = _vera.VERT_LIGHT
FRAG_LIGHT = _vera.FRAG_LIGHT
VERT_FILL = _vera.VERT_FILL
FRAG_FILL = _vera.FRAG_FILL
VERT_POINTS = _vera.VERT_POINTS
FRAG_POINTS = _vera.FRAG_POINTS
FRAG_POSITION = _vera.FRAG_POSITION
FRAG_NORMAL = _vera.FRAG_NORMAL
FRAG_PLOT = _vera.FRAG_PLOT
FRAG_FXAA = _vera.FRAG_FXAA
FRAG_POISSON = _vera.FRAG_POISSON

def setVersionFromCode(_src):
    return _vera.setVersionFromCode(_src)

def getVersion(*args):
    return _vera.getVersion(*args)

def getDefaultSrc(_type):
    return _vera.getDefaultSrc(_type)
SQUARE_SHAPE = _vera.SQUARE_SHAPE
SQUARE_OUTLINE_SHAPE = _vera.SQUARE_OUTLINE_SHAPE
DOT_SHAPE = _vera.DOT_SHAPE
DOT_OUTLINE_SHAPE = _vera.DOT_OUTLINE_SHAPE
CROSS_SHAPE = _vera.CROSS_SHAPE
X_SHAPE = _vera.X_SHAPE

def fullscreen(*args):
    return _vera.fullscreen(*args)

def _print(_text):
    return _vera._print(_text)

def frameRate(_fps):
    return _vera.frameRate(_fps)

def pixelDensity(*args):
    return _vera.pixelDensity(*args)

def clear(*args):
    return _vera.clear(*args)

def fill(*args):
    return _vera.fill(*args)

def noFill():
    return _vera.noFill()

def getFillColor():
    return _vera.getFillColor()

def stroke(*args):
    return _vera.stroke(*args)

def noStroke():
    return _vera.noStroke()

def strokeWeight(_weight):
    return _vera.strokeWeight(_weight)

def getStrokeColor():
    return _vera.getStrokeColor()

def resetMatrix():
    return _vera.resetMatrix()

def applyMatrix(*args):
    return _vera.applyMatrix(*args)

def getProjectionViewWorldMatrix():
    return _vera.getProjectionViewWorldMatrix()

def getProjectionViewMatrix():
    return _vera.getProjectionViewMatrix()

def getProjectionMatrix():
    return _vera.getProjectionMatrix()

def getViewMatrix():
    return _vera.getViewMatrix()

def getWorldMatrix():
    return _vera.getWorldMatrix()

def getWorldMatrixPtr():
    return _vera.getWorldMatrixPtr()

def rotate(*args):
    return _vera.rotate(*args)

def rotateX(*args):
    return _vera.rotateX(*args)

def rotateY(*args):
    return _vera.rotateY(*args)

def rotateZ(*args):
    return _vera.rotateZ(*args)

def scale(*args):
    return _vera.scale(*args)

def translate(*args):
    return _vera.translate(*args)

def push():
    return _vera.push()

def pop():
    return _vera.pop()

def pointSize(_size):
    return _vera.pointSize(_size)

def pointShape(_shape):
    return _vera.pointShape(_shape)

def points(*args):
    return _vera.points(*args)

def pointsBoundingBox(_bbox, _program=None):
    return _vera.pointsBoundingBox(_bbox, _program)

def line(*args):
    return _vera.line(*args)

def lineBoundingBox(_bbox, _program=None):
    return _vera.lineBoundingBox(_bbox, _program)

def triangles(*args):
    return _vera.triangles(*args)

def rectAlign(*args):
    return _vera.rectAlign(*args)

def rect(*args):
    return _vera.rect(*args)

def loadImage(_name):
    return _vera.loadImage(_name)

def image(*args):
    return _vera.image(*args)

def imageDepth(*args):
    return _vera.imageDepth(*args)

def getBillboard():
    return _vera.getBillboard()

def getFont(*args):
    return _vera.getFont(*args)

def getFontHeight():
    return _vera.getFontHeight()

def loadFont(*args):
    return _vera.loadFont(*args)

def addFont(*args):
    return _vera.addFont(*args)

def textFont(_name):
    return _vera.textFont(_name)

def textAlign(*args):
    return _vera.textAlign(*args)

def textAngle(_angle, _font=None):
    return _vera.textAngle(_angle, _font)

def textSize(_size, _font=None):
    return _vera.textSize(_size, _font)

def text(*args):
    return _vera.text(*args)

def loadShader(_fragFile, _vertFile):
    return _vera.loadShader(_fragFile, _vertFile)

def createShader(*args):
    return _vera.createShader(*args)

def addShader(*args):
    return _vera.addShader(*args)

def getShader(*args):
    return _vera.getShader(*args)

def getFillShader():
    return _vera.getFillShader()

def getPointShader():
    return _vera.getPointShader()

def resetShader():
    return _vera.resetShader()

def shader(*args):
    return _vera.shader(*args)

def addTexture(*args):
    return _vera.addTexture(*args)

def getTexture(_name):
    return _vera.getTexture(_name)

def texture(*args):
    return _vera.texture(*args)

def setScene(*args):
    return _vera.setScene(*args)

def getScene():
    return _vera.getScene()

def perspective(_fovy, _aspect, _near, _far):
    return _vera.perspective(_fovy, _aspect, _near, _far)

def ortho(_left, _right, _bottom, _top, _near, _far):
    return _vera.ortho(_left, _right, _bottom, _top, _near, _far)

def createCamera(*args):
    return _vera.createCamera(*args)

def addCamera(*args):
    return _vera.addCamera(*args)

def setCamera(*args):
    return _vera.setCamera(*args)

def resetCamera():
    return _vera.resetCamera()

def getCamera():
    return _vera.getCamera()

def lights():
    return _vera.lights()

def noLights():
    return _vera.noLights()

def createLight(*args):
    return _vera.createLight(*args)

def addLight(*args):
    return _vera.addLight(*args)

def loadModel(_filename):
    return _vera.loadModel(_filename)

def model(*args):
    return _vera.model(*args)

def addLabel(*args):
    return _vera.addLabel(*args)

def labels():
    return _vera.labels()

def labelAt(_x, _y):
    return _vera.labelAt(_x, _y)

def label(_index):
    return _vera.label(_index)
class QuiltProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vera.QuiltProperties_swiginit(self, _vera.new_QuiltProperties(*args))
    width = property(_vera.QuiltProperties_width_get, _vera.QuiltProperties_width_set)
    height = property(_vera.QuiltProperties_height_get, _vera.QuiltProperties_height_set)
    columns = property(_vera.QuiltProperties_columns_get, _vera.QuiltProperties_columns_set)
    rows = property(_vera.QuiltProperties_rows_get, _vera.QuiltProperties_rows_set)
    totalViews = property(_vera.QuiltProperties_totalViews_get, _vera.QuiltProperties_totalViews_set)
    __swig_destroy__ = _vera.delete_QuiltProperties

# Register QuiltProperties in _vera:
_vera.QuiltProperties_swigregister(QuiltProperties)


def setQuiltProperties(*args):
    return _vera.setQuiltProperties(*args)

def getQuiltWidth():
    return _vera.getQuiltWidth()

def getQuiltHeight():
    return _vera.getQuiltHeight()

def getQuiltColumns():
    return _vera.getQuiltColumns()

def getQuiltRows():
    return _vera.getQuiltRows()

def getQuiltTotalViews():
    return _vera.getQuiltTotalViews()

def getQuiltCurrentViewIndex():
    return _vera.getQuiltCurrentViewIndex()

def getQuiltFbo():
    return _vera.getQuiltFbo()

def renderQuilt(_renderFnc, _justQuilt=False):
    return _vera.renderQuilt(_renderFnc, _justQuilt)
class LenticularProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dpi = property(_vera.LenticularProperties_dpi_get, _vera.LenticularProperties_dpi_set)
    pitch = property(_vera.LenticularProperties_pitch_get, _vera.LenticularProperties_pitch_set)
    slope = property(_vera.LenticularProperties_slope_get, _vera.LenticularProperties_slope_set)
    center = property(_vera.LenticularProperties_center_get, _vera.LenticularProperties_center_set)
    ri = property(_vera.LenticularProperties_ri_get, _vera.LenticularProperties_ri_set)
    bi = property(_vera.LenticularProperties_bi_get, _vera.LenticularProperties_bi_set)

    def __init__(self):
        _vera.LenticularProperties_swiginit(self, _vera.new_LenticularProperties())
    __swig_destroy__ = _vera.delete_LenticularProperties

# Register LenticularProperties in _vera:
_vera.LenticularProperties_swigregister(LenticularProperties)


def setLenticularProperties(*args):
    return _vera.setLenticularProperties(*args)

def getLenticularFragShader(_versionNumber=100):
    return _vera.getLenticularFragShader(_versionNumber)

def feedLenticularUniforms(_shader):
    return _vera.feedLenticularUniforms(_shader)
NONE_XR_MODE = _vera.NONE_XR_MODE
VR_MODE = _vera.VR_MODE
AR_MODE = _vera.AR_MODE

def setXR(_mode):
    return _vera.setXR(_mode)

def getXR():
    return _vera.getXR()
HEADLESS = _vera.HEADLESS
REGULAR = _vera.REGULAR
ALLWAYS_ON_TOP = _vera.ALLWAYS_ON_TOP
UNDECORATED = _vera.UNDECORATED
UNDECORATED_ALLWAYS_ON_TOP = _vera.UNDECORATED_ALLWAYS_ON_TOP
FULLSCREEN = _vera.FULLSCREEN
LENTICULAR = _vera.LENTICULAR
class WindowProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    style = property(_vera.WindowProperties_style_get, _vera.WindowProperties_style_set)
    major = property(_vera.WindowProperties_major_get, _vera.WindowProperties_major_set)
    minor = property(_vera.WindowProperties_minor_get, _vera.WindowProperties_minor_set)
    msaa = property(_vera.WindowProperties_msaa_get, _vera.WindowProperties_msaa_set)
    vendor = property(_vera.WindowProperties_vendor_get, _vera.WindowProperties_vendor_set)
    renderer = property(_vera.WindowProperties_renderer_get, _vera.WindowProperties_renderer_set)
    version = property(_vera.WindowProperties_version_get, _vera.WindowProperties_version_set)
    glsl = property(_vera.WindowProperties_glsl_get, _vera.WindowProperties_glsl_set)
    extensions = property(_vera.WindowProperties_extensions_get, _vera.WindowProperties_extensions_set)
    mouse = property(_vera.WindowProperties_mouse_get, _vera.WindowProperties_mouse_set)
    screen_x = property(_vera.WindowProperties_screen_x_get, _vera.WindowProperties_screen_x_set)
    screen_y = property(_vera.WindowProperties_screen_y_get, _vera.WindowProperties_screen_y_set)
    screen_width = property(_vera.WindowProperties_screen_width_get, _vera.WindowProperties_screen_width_set)
    screen_height = property(_vera.WindowProperties_screen_height_get, _vera.WindowProperties_screen_height_set)

    def __init__(self):
        _vera.WindowProperties_swiginit(self, _vera.new_WindowProperties())
    __swig_destroy__ = _vera.delete_WindowProperties

# Register WindowProperties in _vera:
_vera.WindowProperties_swigregister(WindowProperties)


def initGL(*args):
    return _vera.initGL(*args)

def isGL():
    return _vera.isGL()

def updateGL():
    return _vera.updateGL()

def renderGL():
    return _vera.renderGL()

def closeGL():
    return _vera.closeGL()

def getVendor():
    return _vera.getVendor()

def getRenderer():
    return _vera.getRenderer()

def getGLVersion():
    return _vera.getGLVersion()

def getGLSLVersion():
    return _vera.getGLSLVersion()

def getExtensions():
    return _vera.getExtensions()

def haveExtension(_name):
    return _vera.haveExtension(_name)

def updateViewport():
    return _vera.updateViewport()

def setFps(_fps):
    return _vera.setFps(_fps)

def setPixelDensity(_density):
    return _vera.setPixelDensity(_density)

def setViewport(_width, _height):
    return _vera.setViewport(_width, _height)

def setWindowSize(_width, _height):
    return _vera.setWindowSize(_width, _height)

def setWindowTitle(_title):
    return _vera.setWindowTitle(_title)

def setWindowVSync(_value):
    return _vera.setWindowVSync(_value)

def setWindowIcon(_data, _width, _height):
    return _vera.setWindowIcon(_data, _width, _height)

def isFullscreen():
    return _vera.isFullscreen()

def setFullscreen(_fullscreen):
    return _vera.setFullscreen(_fullscreen)

def getScreenWidth():
    return _vera.getScreenWidth()

def getScreenHeight():
    return _vera.getScreenHeight()

def getPixelDensity(_compute=False):
    return _vera.getPixelDensity(_compute)

def getViewport():
    return _vera.getViewport()

def getOrthoMatrix():
    return _vera.getOrthoMatrix()

def getFlippedOrthoMatrix():
    return _vera.getFlippedOrthoMatrix()

def getWindowWidth():
    return _vera.getWindowWidth()

def getWindowHeight():
    return _vera.getWindowHeight()

def getWindowMSAA():
    return _vera.getWindowMSAA()

def getWindowStyle():
    return _vera.getWindowStyle()

def getDate():
    return _vera.getDate()

def getTimeSec():
    return _vera.getTimeSec()

def getTime():
    return _vera.getTime()

def getDelta():
    return _vera.getDelta()

def getFps():
    return _vera.getFps()

def getRestSec():
    return _vera.getRestSec()

def getRestMs():
    return _vera.getRestMs()

def getRestUs():
    return _vera.getRestUs()

def setMousePosition(_x, _y):
    return _vera.setMousePosition(_x, _y)

def setMouseVisibility(_visible):
    return _vera.setMouseVisibility(_visible)

def getMouseX():
    return _vera.getMouseX()

def getMouseY():
    return _vera.getMouseY()

def getMouseVelX():
    return _vera.getMouseVelX()

def getMouseVelY():
    return _vera.getMouseVelY()

def getMouseButton():
    return _vera.getMouseButton()

def getMouseEntered():
    return _vera.getMouseEntered()

def isShiftPressed():
    return _vera.isShiftPressed()

def isControlPressed():
    return _vera.isControlPressed()

def setViewportResizeCallback(arg1):
    return _vera.setViewportResizeCallback(arg1)

def setKeyPressCallback(arg1):
    return _vera.setKeyPressCallback(arg1)

def setMouseMoveCallback(arg1):
    return _vera.setMouseMoveCallback(arg1)

def setMousePressCallback(arg1):
    return _vera.setMousePressCallback(arg1)

def setMouseReleaseCallback(arg1):
    return _vera.setMouseReleaseCallback(arg1)

def setMouseDragCallback(arg1):
    return _vera.setMouseDragCallback(arg1)

def setScrollCallback(arg1):
    return _vera.setScrollCallback(arg1)

def setDropCallback(arg1):
    return _vera.setDropCallback(arg1)
class App(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self, *args):
        return _vera.App_run(self, *args)

    def setup(self):
        return _vera.App_setup(self)

    def update(self):
        return _vera.App_update(self)

    def draw(self):
        return _vera.App_draw(self)

    def close(self):
        return _vera.App_close(self)

    def windowResized(self):
        return _vera.App_windowResized(self)

    def onViewportResize(self, _width, _height):
        return _vera.App_onViewportResize(self, _width, _height)

    def keyPressed(self):
        return _vera.App_keyPressed(self)

    def onKeyPress(self, _key):
        return _vera.App_onKeyPress(self, _key)

    def mouseMoved(self):
        return _vera.App_mouseMoved(self)

    def onMouseMove(self, _x, _y):
        return _vera.App_onMouseMove(self, _x, _y)

    def mouseClicked(self):
        return _vera.App_mouseClicked(self)

    def mousePressed(self):
        return _vera.App_mousePressed(self)

    def onMousePress(self, _x, _y, _button):
        return _vera.App_onMousePress(self, _x, _y, _button)

    def mouseReleased(self):
        return _vera.App_mouseReleased(self)

    def onMouseRelease(self, _x, _y, _button):
        return _vera.App_onMouseRelease(self, _x, _y, _button)

    def mouseDragged(self):
        return _vera.App_mouseDragged(self)

    def onMouseDrag(self, _x, _y, _button):
        return _vera.App_onMouseDrag(self, _x, _y, _button)

    def onScroll(self, _yoffset):
        return _vera.App_onScroll(self, _yoffset)

    def onDrop(self, _count, _paths):
        return _vera.App_onDrop(self, _count, _paths)

    def background(self, *args):
        return _vera.App_background(self, *args)

    def orbitControl(self):
        return _vera.App_orbitControl(self)

    def year(self):
        return _vera.App_year(self)

    def month(self):
        return _vera.App_month(self)

    def day(self):
        return _vera.App_day(self)

    def hour(self):
        return _vera.App_hour(self)

    def minute(self):
        return _vera.App_minute(self)

    def second(self):
        return _vera.App_second(self)

    def millis(self):
        return _vera.App_millis(self)
    cameraLat = property(_vera.App_cameraLat_get, _vera.App_cameraLat_set)
    cameraLon = property(_vera.App_cameraLon_get, _vera.App_cameraLon_set)
    width = property(_vera.App_width_get, _vera.App_width_set)
    height = property(_vera.App_height_get, _vera.App_height_set)
    mouseX = property(_vera.App_mouseX_get, _vera.App_mouseX_set)
    mouseY = property(_vera.App_mouseY_get, _vera.App_mouseY_set)
    movedX = property(_vera.App_movedX_get, _vera.App_movedX_set)
    movedY = property(_vera.App_movedY_get, _vera.App_movedY_set)
    pmouseX = property(_vera.App_pmouseX_get, _vera.App_pmouseX_set)
    pmouseY = property(_vera.App_pmouseY_get, _vera.App_pmouseY_set)
    mouseButton = property(_vera.App_mouseButton_get, _vera.App_mouseButton_set)
    mouseIsPressed = property(_vera.App_mouseIsPressed_get, _vera.App_mouseIsPressed_set)
    focused = property(_vera.App_focused_get, _vera.App_focused_set)
    time = property(_vera.App_time_get, _vera.App_time_set)
    deltaTime = property(_vera.App_deltaTime_get, _vera.App_deltaTime_set)
    frameCount = property(_vera.App_frameCount_get, _vera.App_frameCount_set)

    def __init__(self):
        _vera.App_swiginit(self, _vera.new_App())
    __swig_destroy__ = _vera.delete_App

# Register App in _vera:
_vera.App_swigregister(App)



